/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  serial,
  varchar,
  boolean,
  timestamp,
  jsonb,
  numeric,
  integer,
  text,
  type AnyPgColumn,
  pgEnum,
} from '@payloadcms/db-vercel-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-vercel-postgres/drizzle'
export const enum_users_roles = pgEnum('enum_users_roles', ['admin', 'customer'])
export const enum_orders_status = pgEnum('enum_orders_status', [
  'canceled',
  'processing',
  'requires_action',
  'requires_capture',
  'requires_confirmation',
  'requires_payment_method',
  'succeeded',
])
export const enum_products_compatibility = pgEnum('enum_products_compatibility', [
  'swimspa',
  'hottub',
  'pool',
])
export const enum_products_status = pgEnum('enum_products_status', ['draft', 'published'])
export const enum__products_v_version_compatibility = pgEnum(
  'enum__products_v_version_compatibility',
  ['swimspa', 'hottub', 'pool'],
)
export const enum__products_v_version_status = pgEnum('enum__products_v_version_status', [
  'draft',
  'published',
])
export const enum_pages_hero_links_link_type = pgEnum('enum_pages_hero_links_link_type', [
  'reference',
  'custom',
])
export const enum_pages_hero_links_link_appearance = pgEnum(
  'enum_pages_hero_links_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_hero_slides_links_link_type = pgEnum(
  'enum_pages_hero_slides_links_link_type',
  ['reference', 'custom'],
)
export const enum_pages_hero_slides_links_link_appearance = pgEnum(
  'enum_pages_hero_slides_links_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_archive_populate_by = pgEnum(
  'enum_pages_blocks_archive_populate_by',
  ['collection', 'selection'],
)
export const enum_pages_blocks_archive_relation_to = pgEnum(
  'enum_pages_blocks_archive_relation_to',
  ['posts'],
)
export const enum_pages_blocks_banner_style = pgEnum('enum_pages_blocks_banner_style', [
  'info',
  'warning',
  'error',
  'success',
])
export const enum_pages_blocks_cta_links_link_type = pgEnum(
  'enum_pages_blocks_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_cta_links_link_appearance = pgEnum(
  'enum_pages_blocks_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_code_language = pgEnum('enum_pages_blocks_code_language', [
  'typescript',
  'javascript',
  'css',
])
export const enum_pages_blocks_media_block_position = pgEnum(
  'enum_pages_blocks_media_block_position',
  ['default', 'fullscreen'],
)
export const enum_pages_blocks_typography_links_link_type = pgEnum(
  'enum_pages_blocks_typography_links_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_typography_links_link_appearance = pgEnum(
  'enum_pages_blocks_typography_links_link_appearance',
  ['default', 'secondary', 'none'],
)
export const enum_pages_blocks_typography_type = pgEnum('enum_pages_blocks_typography_type', [
  'sub-title-body',
  'title-body',
  'title',
  'subtitle',
  'body',
])
export const enum_pages_blocks_typography_align = pgEnum('enum_pages_blocks_typography_align', [
  'left',
  'center',
  'right',
])
export const enum_pages_blocks_card_type = pgEnum('enum_pages_blocks_card_type', [
  'icon',
  'product',
  'service',
])
export const enum_pages_blocks_card_icon = pgEnum('enum_pages_blocks_card_icon', [
  'moon',
  'heart-eyes',
  'swimming',
  'walking',
  'wave',
  'theater-masks',
  'heart',
  'sleeping',
  'stress',
  'aches',
  'sick',
])
export const enum_pages_blocks_grid_content_content_type = pgEnum(
  'enum_pages_blocks_grid_content_content_type',
  ['blocks', 'richText'],
)
export const enum_pages_blocks_grid_grid_style = pgEnum('enum_pages_blocks_grid_grid_style', [
  'basic',
  'masonry',
  'responsive',
])
export const enum_pages_blocks_content_columns_type = pgEnum(
  'enum_pages_blocks_content_columns_type',
  ['blocks', 'richText'],
)
export const enum_pages_blocks_content_columns_size = pgEnum(
  'enum_pages_blocks_content_columns_size',
  ['oneThird', 'half', 'twoThirds', 'full'],
)
export const enum_pages_blocks_content_columns_align = pgEnum(
  'enum_pages_blocks_content_columns_align',
  ['start', 'center', 'end'],
)
export const enum_pages_blocks_content_columns_link_type = pgEnum(
  'enum_pages_blocks_content_columns_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_content_columns_link_appearance = pgEnum(
  'enum_pages_blocks_content_columns_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_services_offerings_link_type = pgEnum(
  'enum_pages_blocks_services_offerings_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_services_offerings_link_appearance = pgEnum(
  'enum_pages_blocks_services_offerings_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_services_link_type = pgEnum('enum_pages_blocks_services_link_type', [
  'reference',
  'custom',
])
export const enum_pages_blocks_services_link_appearance = pgEnum(
  'enum_pages_blocks_services_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_testimonials_link_type = pgEnum(
  'enum_pages_blocks_testimonials_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_testimonials_link_appearance = pgEnum(
  'enum_pages_blocks_testimonials_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_testimonials_populate_by = pgEnum(
  'enum_pages_blocks_testimonials_populate_by',
  ['collection', 'selection'],
)
export const enum_pages_blocks_latest_posts_link_type = pgEnum(
  'enum_pages_blocks_latest_posts_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_latest_posts_link_appearance = pgEnum(
  'enum_pages_blocks_latest_posts_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_featured_spas_link_type = pgEnum(
  'enum_pages_blocks_featured_spas_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_featured_spas_link_appearance = pgEnum(
  'enum_pages_blocks_featured_spas_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_hero_type = pgEnum('enum_pages_hero_type', [
  'none',
  'standard',
  'slider',
  'highImpact',
  'mediumImpact',
  'lowImpact',
  'parallax',
])
export const enum_pages_hero_size = pgEnum('enum_pages_hero_size', ['large', 'medium', 'small'])
export const enum_pages_status = pgEnum('enum_pages_status', ['draft', 'published'])
export const enum__pages_v_version_hero_links_link_type = pgEnum(
  'enum__pages_v_version_hero_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_version_hero_links_link_appearance = pgEnum(
  'enum__pages_v_version_hero_links_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_version_hero_slides_links_link_type = pgEnum(
  'enum__pages_v_version_hero_slides_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_version_hero_slides_links_link_appearance = pgEnum(
  'enum__pages_v_version_hero_slides_links_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_archive_populate_by = pgEnum(
  'enum__pages_v_blocks_archive_populate_by',
  ['collection', 'selection'],
)
export const enum__pages_v_blocks_archive_relation_to = pgEnum(
  'enum__pages_v_blocks_archive_relation_to',
  ['posts'],
)
export const enum__pages_v_blocks_banner_style = pgEnum('enum__pages_v_blocks_banner_style', [
  'info',
  'warning',
  'error',
  'success',
])
export const enum__pages_v_blocks_cta_links_link_type = pgEnum(
  'enum__pages_v_blocks_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_cta_links_link_appearance = pgEnum(
  'enum__pages_v_blocks_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_code_language = pgEnum('enum__pages_v_blocks_code_language', [
  'typescript',
  'javascript',
  'css',
])
export const enum__pages_v_blocks_media_block_position = pgEnum(
  'enum__pages_v_blocks_media_block_position',
  ['default', 'fullscreen'],
)
export const enum__pages_v_blocks_typography_links_link_type = pgEnum(
  'enum__pages_v_blocks_typography_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_typography_links_link_appearance = pgEnum(
  'enum__pages_v_blocks_typography_links_link_appearance',
  ['default', 'secondary', 'none'],
)
export const enum__pages_v_blocks_typography_type = pgEnum('enum__pages_v_blocks_typography_type', [
  'sub-title-body',
  'title-body',
  'title',
  'subtitle',
  'body',
])
export const enum__pages_v_blocks_typography_align = pgEnum(
  'enum__pages_v_blocks_typography_align',
  ['left', 'center', 'right'],
)
export const enum__pages_v_blocks_card_type = pgEnum('enum__pages_v_blocks_card_type', [
  'icon',
  'product',
  'service',
])
export const enum__pages_v_blocks_card_icon = pgEnum('enum__pages_v_blocks_card_icon', [
  'moon',
  'heart-eyes',
  'swimming',
  'walking',
  'wave',
  'theater-masks',
  'heart',
  'sleeping',
  'stress',
  'aches',
  'sick',
])
export const enum__pages_v_blocks_grid_content_content_type = pgEnum(
  'enum__pages_v_blocks_grid_content_content_type',
  ['blocks', 'richText'],
)
export const enum__pages_v_blocks_grid_grid_style = pgEnum('enum__pages_v_blocks_grid_grid_style', [
  'basic',
  'masonry',
  'responsive',
])
export const enum__pages_v_blocks_content_columns_type = pgEnum(
  'enum__pages_v_blocks_content_columns_type',
  ['blocks', 'richText'],
)
export const enum__pages_v_blocks_content_columns_size = pgEnum(
  'enum__pages_v_blocks_content_columns_size',
  ['oneThird', 'half', 'twoThirds', 'full'],
)
export const enum__pages_v_blocks_content_columns_align = pgEnum(
  'enum__pages_v_blocks_content_columns_align',
  ['start', 'center', 'end'],
)
export const enum__pages_v_blocks_content_columns_link_type = pgEnum(
  'enum__pages_v_blocks_content_columns_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_content_columns_link_appearance = pgEnum(
  'enum__pages_v_blocks_content_columns_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_services_offerings_link_type = pgEnum(
  'enum__pages_v_blocks_services_offerings_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_services_offerings_link_appearance = pgEnum(
  'enum__pages_v_blocks_services_offerings_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_services_link_type = pgEnum(
  'enum__pages_v_blocks_services_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_services_link_appearance = pgEnum(
  'enum__pages_v_blocks_services_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_testimonials_link_type = pgEnum(
  'enum__pages_v_blocks_testimonials_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_testimonials_link_appearance = pgEnum(
  'enum__pages_v_blocks_testimonials_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_testimonials_populate_by = pgEnum(
  'enum__pages_v_blocks_testimonials_populate_by',
  ['collection', 'selection'],
)
export const enum__pages_v_blocks_latest_posts_link_type = pgEnum(
  'enum__pages_v_blocks_latest_posts_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_latest_posts_link_appearance = pgEnum(
  'enum__pages_v_blocks_latest_posts_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_featured_spas_link_type = pgEnum(
  'enum__pages_v_blocks_featured_spas_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_featured_spas_link_appearance = pgEnum(
  'enum__pages_v_blocks_featured_spas_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_version_hero_type = pgEnum('enum__pages_v_version_hero_type', [
  'none',
  'standard',
  'slider',
  'highImpact',
  'mediumImpact',
  'lowImpact',
  'parallax',
])
export const enum__pages_v_version_hero_size = pgEnum('enum__pages_v_version_hero_size', [
  'large',
  'medium',
  'small',
])
export const enum__pages_v_version_status = pgEnum('enum__pages_v_version_status', [
  'draft',
  'published',
])
export const enum_posts_status = pgEnum('enum_posts_status', ['draft', 'published'])
export const enum__posts_v_version_status = pgEnum('enum__posts_v_version_status', [
  'draft',
  'published',
])
export const enum_product_collections_collection_type = pgEnum(
  'enum_product_collections_collection_type',
  ['seasonal', 'promotional', 'curated'],
)
export const enum_product_collections_status = pgEnum('enum_product_collections_status', [
  'draft',
  'published',
])
export const enum__product_collections_v_version_collection_type = pgEnum(
  'enum__product_collections_v_version_collection_type',
  ['seasonal', 'promotional', 'curated'],
)
export const enum__product_collections_v_version_status = pgEnum(
  'enum__product_collections_v_version_status',
  ['draft', 'published'],
)
export const enum_spas_type = pgEnum('enum_spas_type', ['hot-tub', 'swim-spa'])
export const enum_spas_hot_tub_collection = pgEnum('enum_spas_hot_tub_collection', [
  'self-cleaning',
  'serenity',
])
export const enum_spas_swim_spa_collection = pgEnum('enum_spas_swim_spa_collection', [
  'executive-trainer',
  'executive-sport',
  'aqua-trainer',
  'aqua-sport',
  'aqua-play',
])
export const enum_spas_pure_water_system = pgEnum('enum_spas_pure_water_system', [
  'optional',
  'standard',
])
export const enum_spas_ez_zone_pure = pgEnum('enum_spas_ez_zone_pure', ['optional', 'standard'])
export const enum_spas_oasis_package = pgEnum('enum_spas_oasis_package', [
  'optional',
  'not-available',
])
export const enum_spas_hydro_flex = pgEnum('enum_spas_hydro_flex', ['optional', 'not-available'])
export const enum_spas_i_command = pgEnum('enum_spas_i_command', ['optional', 'not-available'])
export const enum_spas_northern_falls = pgEnum('enum_spas_northern_falls', [
  'optional',
  'not-available',
])
export const enum_spas_chromatherapy = pgEnum('enum_spas_chromatherapy', [
  'optional',
  'not-available',
])
export const enum_galleries_hero_links_link_type = pgEnum('enum_galleries_hero_links_link_type', [
  'reference',
  'custom',
])
export const enum_galleries_hero_links_link_appearance = pgEnum(
  'enum_galleries_hero_links_link_appearance',
  ['default', 'outline'],
)
export const enum_galleries_hero_slides_links_link_type = pgEnum(
  'enum_galleries_hero_slides_links_link_type',
  ['reference', 'custom'],
)
export const enum_galleries_hero_slides_links_link_appearance = pgEnum(
  'enum_galleries_hero_slides_links_link_appearance',
  ['default', 'outline'],
)
export const enum_galleries_hero_type = pgEnum('enum_galleries_hero_type', [
  'none',
  'standard',
  'slider',
  'highImpact',
  'mediumImpact',
  'lowImpact',
  'parallax',
])
export const enum_galleries_hero_size = pgEnum('enum_galleries_hero_size', [
  'large',
  'medium',
  'small',
])
export const enum_form_submissions_submission_type = pgEnum(
  'enum_form_submissions_submission_type',
  ['contact'],
)
export const enum_shipping_options_type = pgEnum('enum_shipping_options_type', [
  'pickup',
  'shipping',
])
export const enum_redirects_to_type = pgEnum('enum_redirects_to_type', ['reference', 'custom'])
export const enum_shop_settings_currency = pgEnum('enum_shop_settings_currency', [
  'USD',
  'EUR',
  'GBP',
])
export const enum_header_site_items_item_submenu_links_type = pgEnum(
  'enum_header_site_items_item_submenu_links_type',
  ['reference', 'custom'],
)
export const enum_header_site_items_item_submenu_link_type = pgEnum(
  'enum_header_site_items_item_submenu_link_type',
  ['reference', 'custom'],
)
export const enum_header_site_items_item_link_type = pgEnum(
  'enum_header_site_items_item_link_type',
  ['reference', 'custom'],
)
export const enum_header_shop_items_item_submenu_links_type = pgEnum(
  'enum_header_shop_items_item_submenu_links_type',
  ['reference', 'custom'],
)
export const enum_header_shop_items_item_submenu_link_type = pgEnum(
  'enum_header_shop_items_item_submenu_link_type',
  ['reference', 'custom'],
)
export const enum_header_shop_items_item_link_type = pgEnum(
  'enum_header_shop_items_item_link_type',
  ['reference', 'custom'],
)
export const enum_footer_site_footer_nav_items_link_type = pgEnum(
  'enum_footer_site_footer_nav_items_link_type',
  ['reference', 'custom'],
)
export const enum_footer_shop_footer_nav_items_link_type = pgEnum(
  'enum_footer_shop_footer_nav_items_link_type',
  ['reference', 'custom'],
)
export const enum_store_hours_days_day_of_week = pgEnum('enum_store_hours_days_day_of_week', [
  'Monday',
  'Tuesday',
  'Wednesday',
  'Thursday',
  'Friday',
  'Saturday',
  'Sunday',
])
export const enum_store_hours_days_opentime_tz = pgEnum('enum_store_hours_days_opentime_tz', [
  'Pacific/Midway',
  'Pacific/Niue',
  'Pacific/Honolulu',
  'Pacific/Rarotonga',
  'America/Anchorage',
  'Pacific/Gambier',
  'America/Los_Angeles',
  'America/Tijuana',
  'America/Denver',
  'America/Phoenix',
  'America/Chicago',
  'America/Guatemala',
  'America/New_York',
  'America/Bogota',
  'America/Caracas',
  'America/Santiago',
  'America/Buenos_Aires',
  'America/Sao_Paulo',
  'Atlantic/South_Georgia',
  'Atlantic/Azores',
  'Atlantic/Cape_Verde',
  'Europe/London',
  'Europe/Berlin',
  'Africa/Lagos',
  'Europe/Athens',
  'Africa/Cairo',
  'Europe/Moscow',
  'Asia/Riyadh',
  'Asia/Dubai',
  'Asia/Baku',
  'Asia/Karachi',
  'Asia/Tashkent',
  'Asia/Calcutta',
  'Asia/Dhaka',
  'Asia/Almaty',
  'Asia/Jakarta',
  'Asia/Bangkok',
  'Asia/Shanghai',
  'Asia/Singapore',
  'Asia/Tokyo',
  'Asia/Seoul',
  'Australia/Sydney',
  'Pacific/Guam',
  'Pacific/Noumea',
  'Pacific/Auckland',
  'Pacific/Fiji',
])
export const enum_store_hours_days_closetime_tz = pgEnum('enum_store_hours_days_closetime_tz', [
  'Pacific/Midway',
  'Pacific/Niue',
  'Pacific/Honolulu',
  'Pacific/Rarotonga',
  'America/Anchorage',
  'Pacific/Gambier',
  'America/Los_Angeles',
  'America/Tijuana',
  'America/Denver',
  'America/Phoenix',
  'America/Chicago',
  'America/Guatemala',
  'America/New_York',
  'America/Bogota',
  'America/Caracas',
  'America/Santiago',
  'America/Buenos_Aires',
  'America/Sao_Paulo',
  'Atlantic/South_Georgia',
  'Atlantic/Azores',
  'Atlantic/Cape_Verde',
  'Europe/London',
  'Europe/Berlin',
  'Africa/Lagos',
  'Europe/Athens',
  'Africa/Cairo',
  'Europe/Moscow',
  'Asia/Riyadh',
  'Asia/Dubai',
  'Asia/Baku',
  'Asia/Karachi',
  'Asia/Tashkent',
  'Asia/Calcutta',
  'Asia/Dhaka',
  'Asia/Almaty',
  'Asia/Jakarta',
  'Asia/Bangkok',
  'Asia/Shanghai',
  'Asia/Singapore',
  'Asia/Tokyo',
  'Asia/Seoul',
  'Australia/Sydney',
  'Pacific/Guam',
  'Pacific/Noumea',
  'Pacific/Auckland',
  'Pacific/Fiji',
])

export const blog_categories = pgTable(
  'blog_categories',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    showInFilter: boolean('show_in_filter').default(true),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    blog_categories_slug_idx: index('blog_categories_slug_idx').on(columns.slug),
    blog_categories_updated_at_idx: index('blog_categories_updated_at_idx').on(columns.updatedAt),
    blog_categories_created_at_idx: index('blog_categories_created_at_idx').on(columns.createdAt),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt').notNull(),
    caption: jsonb('caption'),
    prefix: varchar('prefix').default('bonavista/'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
    sizes_thumbnail_url: varchar('sizes_thumbnail_url'),
    sizes_thumbnail_width: numeric('sizes_thumbnail_width'),
    sizes_thumbnail_height: numeric('sizes_thumbnail_height'),
    sizes_thumbnail_mimeType: varchar('sizes_thumbnail_mime_type'),
    sizes_thumbnail_filesize: numeric('sizes_thumbnail_filesize'),
    sizes_thumbnail_filename: varchar('sizes_thumbnail_filename'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      'media_sizes_thumbnail_sizes_thumbnail_filename_idx',
    ).on(columns.sizes_thumbnail_filename),
  }),
)

export const users_roles = pgTable(
  'users_roles',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_users_roles('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('users_roles_order_idx').on(columns.order),
    parentIdx: index('users_roles_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [users.id],
      name: 'users_roles_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    firstName: varchar('first_name'),
    lastName: varchar('last_name'),
    name: varchar('name'),
    phone: varchar('phone'),
    customer: integer('customer_id').references(() => customers.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_customer_idx: index('users_customer_idx').on(columns.customer),
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const cart_line_items_line_item_variant_options = pgTable(
  'cart_line_items_line_item_variant_options',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    key_slug: varchar('key_slug'),
    key_label: varchar('key_label'),
    value_slug: varchar('value_slug'),
    value_label: varchar('value_label'),
  },
  (columns) => ({
    _orderIdx: index('cart_line_items_line_item_variant_options_order_idx').on(columns._order),
    _parentIDIdx: index('cart_line_items_line_item_variant_options_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [cart_line_items.id],
      name: 'cart_line_items_line_item_variant_options_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const cart_line_items = pgTable(
  'cart_line_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    lineItem_product: integer('line_item_product_id')
      .notNull()
      .references(() => products.id, {
        onDelete: 'set null',
      }),
    lineItem_isVariant: boolean('line_item_is_variant').default(false),
    lineItem_sku: varchar('line_item_sku').notNull(),
    lineItem_price: numeric('line_item_price').notNull(),
    lineItem_quantity: numeric('line_item_quantity').notNull(),
    lineItem_thumbnail: integer('line_item_thumbnail_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    lineItem_url: varchar('line_item_url'),
  },
  (columns) => ({
    _orderIdx: index('cart_line_items_order_idx').on(columns._order),
    _parentIDIdx: index('cart_line_items_parent_id_idx').on(columns._parentID),
    cart_line_items_line_item_line_item_product_idx: index(
      'cart_line_items_line_item_line_item_product_idx',
    ).on(columns.lineItem_product),
    cart_line_items_line_item_line_item_thumbnail_idx: index(
      'cart_line_items_line_item_line_item_thumbnail_idx',
    ).on(columns.lineItem_thumbnail),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [cart.id],
      name: 'cart_line_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const cart = pgTable(
  'cart',
  {
    id: serial('id').primaryKey(),
    customer: integer('customer_id').references(() => customers.id, {
      onDelete: 'set null',
    }),
    payment_intent: jsonb('payment_intent'),
    checkout_session: jsonb('checkout_session'),
    taxCalculationId: varchar('tax_calculation_id'),
    completed_at: timestamp('completed_at', { mode: 'string', withTimezone: true, precision: 3 }),
    payment_authorized_at: timestamp('payment_authorized_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    metadata: jsonb('metadata'),
    payment: jsonb('payment'),
    discount_total: numeric('discount_total'),
    subtotal: numeric('subtotal'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    cart_customer_idx: index('cart_customer_idx').on(columns.customer),
    cart_updated_at_idx: index('cart_updated_at_idx').on(columns.updatedAt),
    cart_created_at_idx: index('cart_created_at_idx').on(columns.createdAt),
  }),
)

export const orders_line_items_line_item_variant_options = pgTable(
  'orders_line_items_line_item_variant_options',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    key_slug: varchar('key_slug'),
    key_label: varchar('key_label'),
    value_slug: varchar('value_slug'),
    value_label: varchar('value_label'),
  },
  (columns) => ({
    _orderIdx: index('orders_line_items_line_item_variant_options_order_idx').on(columns._order),
    _parentIDIdx: index('orders_line_items_line_item_variant_options_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [orders_line_items.id],
      name: 'orders_line_items_line_item_variant_options_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const orders_line_items = pgTable(
  'orders_line_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    lineItem_product: integer('line_item_product_id')
      .notNull()
      .references(() => products.id, {
        onDelete: 'set null',
      }),
    lineItem_isVariant: boolean('line_item_is_variant').default(false),
    lineItem_sku: varchar('line_item_sku').notNull(),
    lineItem_price: numeric('line_item_price').notNull(),
    lineItem_quantity: numeric('line_item_quantity').notNull(),
    lineItem_thumbnail: integer('line_item_thumbnail_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    lineItem_url: varchar('line_item_url'),
  },
  (columns) => ({
    _orderIdx: index('orders_line_items_order_idx').on(columns._order),
    _parentIDIdx: index('orders_line_items_parent_id_idx').on(columns._parentID),
    orders_line_items_line_item_line_item_product_idx: index(
      'orders_line_items_line_item_line_item_product_idx',
    ).on(columns.lineItem_product),
    orders_line_items_line_item_line_item_thumbnail_idx: index(
      'orders_line_items_line_item_line_item_thumbnail_idx',
    ).on(columns.lineItem_thumbnail),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [orders.id],
      name: 'orders_line_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const orders = pgTable(
  'orders',
  {
    id: serial('id').primaryKey(),
    orderNumber: varchar('order_number').notNull(),
    status: enum_orders_status('status').default('requires_action'),
    orderedBy: integer('ordered_by_id').references(() => customers.id, {
      onDelete: 'set null',
    }),
    stripePaymentIntentID: varchar('stripe_payment_intent_i_d'),
    shippingRate_displayName: varchar('shipping_rate_display_name'),
    shippingRate_rate: numeric('shipping_rate_rate'),
    total: numeric('total').notNull(),
    taxTotal: numeric('tax_total').notNull(),
    currency: varchar('currency').notNull(),
    paymentIntent: jsonb('payment_intent'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    orders_ordered_by_idx: index('orders_ordered_by_idx').on(columns.orderedBy),
    orders_updated_at_idx: index('orders_updated_at_idx').on(columns.updatedAt),
    orders_created_at_idx: index('orders_created_at_idx').on(columns.createdAt),
  }),
)

export const products_base_product_images = pgTable(
  'products_base_product_images',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('products_base_product_images_order_idx').on(columns._order),
    _parentIDIdx: index('products_base_product_images_parent_id_idx').on(columns._parentID),
    products_base_product_images_image_idx: index('products_base_product_images_image_idx').on(
      columns.image,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_base_product_images_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_variants_options_values = pgTable(
  'products_variants_options_values',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label'),
    slug: varchar('slug'),
  },
  (columns) => ({
    _orderIdx: index('products_variants_options_values_order_idx').on(columns._order),
    _parentIDIdx: index('products_variants_options_values_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products_variants_options.id],
      name: 'products_variants_options_values_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_variants_options = pgTable(
  'products_variants_options',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label'),
    slug: varchar('slug'),
  },
  (columns) => ({
    _orderIdx: index('products_variants_options_order_idx').on(columns._order),
    _parentIDIdx: index('products_variants_options_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_variants_options_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_variants_variant_products_images = pgTable(
  'products_variants_variant_products_images',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('products_variants_variant_products_images_order_idx').on(columns._order),
    _parentIDIdx: index('products_variants_variant_products_images_parent_id_idx').on(
      columns._parentID,
    ),
    products_variants_variant_products_images_image_idx: index(
      'products_variants_variant_products_images_image_idx',
    ).on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products_variants_variant_products.id],
      name: 'products_variants_variant_products_images_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_variants_variant_products = pgTable(
  'products_variants_variant_products',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    sku: varchar('sku'),
    price: numeric('price'),
    productActive: boolean('product_active').default(true),
    soldOnline: boolean('sold_online').default(true),
    enableInventory: boolean('enable_inventory').default(false),
    inventory: numeric('inventory').default('0'),
    info: jsonb('info'),
  },
  (columns) => ({
    _orderIdx: index('products_variants_variant_products_order_idx').on(columns._order),
    _parentIDIdx: index('products_variants_variant_products_parent_id_idx').on(columns._parentID),
    products_variants_variant_products_sku_idx: uniqueIndex(
      'products_variants_variant_products_sku_idx',
    ).on(columns.sku),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_variants_variant_products_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_compatibility = pgTable(
  'products_compatibility',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_products_compatibility('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('products_compatibility_order_idx').on(columns.order),
    parentIdx: index('products_compatibility_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [products.id],
      name: 'products_compatibility_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const products = pgTable(
  'products',
  {
    id: serial('id').primaryKey(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    title: varchar('title'),
    description: varchar('description'),
    moreInfo: jsonb('more_info'),
    publishedOn: timestamp('published_on', { mode: 'string', withTimezone: true, precision: 3 }),
    enableVariants: boolean('enable_variants').default(false),
    baseProduct_sku: varchar('base_product_sku'),
    baseProduct_productActive: boolean('base_product_product_active').default(true),
    baseProduct_soldOnline: boolean('base_product_sold_online').default(true),
    baseProduct_enableInventory: boolean('base_product_enable_inventory').default(false),
    baseProduct_inventory: numeric('base_product_inventory').default('0'),
    baseProduct_price: numeric('base_product_price'),
    priceMin: numeric('price_min').default('0'),
    priceMax: numeric('price_max').default('0'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_products_status('_status').default('draft'),
  },
  (columns) => ({
    products_slug_idx: index('products_slug_idx').on(columns.slug),
    products_title_idx: index('products_title_idx').on(columns.title),
    products_price_min_idx: index('products_price_min_idx').on(columns.priceMin),
    products_price_max_idx: index('products_price_max_idx').on(columns.priceMax),
    products_updated_at_idx: index('products_updated_at_idx').on(columns.updatedAt),
    products_created_at_idx: index('products_created_at_idx').on(columns.createdAt),
    products__status_idx: index('products__status_idx').on(columns._status),
  }),
)

export const products_texts = pgTable(
  'products_texts',
  {
    id: serial('id').primaryKey(),
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    text: varchar('text'),
  },
  (columns) => ({
    orderParentIdx: index('products_texts_order_parent_idx').on(columns.order, columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [products.id],
      name: 'products_texts_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const products_rels = pgTable(
  'products_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    productsID: integer('products_id'),
    brandsID: integer('brands_id'),
    'product-collectionsID': integer('product_collections_id'),
    'product-categoriesID': integer('product_categories_id'),
  },
  (columns) => ({
    order: index('products_rels_order_idx').on(columns.order),
    parentIdx: index('products_rels_parent_idx').on(columns.parent),
    pathIdx: index('products_rels_path_idx').on(columns.path),
    products_rels_products_id_idx: index('products_rels_products_id_idx').on(columns.productsID),
    products_rels_brands_id_idx: index('products_rels_brands_id_idx').on(columns.brandsID),
    products_rels_product_collections_id_idx: index('products_rels_product_collections_id_idx').on(
      columns['product-collectionsID'],
    ),
    products_rels_product_categories_id_idx: index('products_rels_product_categories_id_idx').on(
      columns['product-categoriesID'],
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [products.id],
      name: 'products_rels_parent_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'products_rels_products_fk',
    }).onDelete('cascade'),
    brandsIdFk: foreignKey({
      columns: [columns['brandsID']],
      foreignColumns: [brands.id],
      name: 'products_rels_brands_fk',
    }).onDelete('cascade'),
    'product-collectionsIdFk': foreignKey({
      columns: [columns['product-collectionsID']],
      foreignColumns: [product_collections.id],
      name: 'products_rels_product_collections_fk',
    }).onDelete('cascade'),
    'product-categoriesIdFk': foreignKey({
      columns: [columns['product-categoriesID']],
      foreignColumns: [product_categories.id],
      name: 'products_rels_product_categories_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_version_base_product_images = pgTable(
  '_products_v_version_base_product_images',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_version_base_product_images_order_idx').on(columns._order),
    _parentIDIdx: index('_products_v_version_base_product_images_parent_id_idx').on(
      columns._parentID,
    ),
    _products_v_version_base_product_images_image_idx: index(
      '_products_v_version_base_product_images_image_idx',
    ).on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_version_base_product_images_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_version_variants_options_values = pgTable(
  '_products_v_version_variants_options_values',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    label: varchar('label'),
    slug: varchar('slug'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_version_variants_options_values_order_idx').on(columns._order),
    _parentIDIdx: index('_products_v_version_variants_options_values_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v_version_variants_options.id],
      name: '_products_v_version_variants_options_values_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_version_variants_options = pgTable(
  '_products_v_version_variants_options',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    label: varchar('label'),
    slug: varchar('slug'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_version_variants_options_order_idx').on(columns._order),
    _parentIDIdx: index('_products_v_version_variants_options_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_version_variants_options_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_version_variants_variant_products_images = pgTable(
  '_products_v_version_variants_variant_products_images',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_version_variants_variant_products_images_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('_products_v_version_variants_variant_products_images_parent_id_idx').on(
      columns._parentID,
    ),
    _products_v_version_variants_variant_products_images_image_idx: index(
      '_products_v_version_variants_variant_products_images_image_idx',
    ).on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v_version_variants_variant_products.id],
      name: '_products_v_version_variants_variant_products_images_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_version_variants_variant_products = pgTable(
  '_products_v_version_variants_variant_products',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    sku: varchar('sku'),
    price: numeric('price'),
    productActive: boolean('product_active').default(true),
    soldOnline: boolean('sold_online').default(true),
    enableInventory: boolean('enable_inventory').default(false),
    inventory: numeric('inventory').default('0'),
    info: jsonb('info'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_products_v_version_variants_variant_products_order_idx').on(columns._order),
    _parentIDIdx: index('_products_v_version_variants_variant_products_parent_id_idx').on(
      columns._parentID,
    ),
    _products_v_version_variants_variant_products_sku_idx: index(
      '_products_v_version_variants_variant_products_sku_idx',
    ).on(columns.sku),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_version_variants_variant_products_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_version_compatibility = pgTable(
  '_products_v_version_compatibility',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum__products_v_version_compatibility('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('_products_v_version_compatibility_order_idx').on(columns.order),
    parentIdx: index('_products_v_version_compatibility_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_products_v.id],
      name: '_products_v_version_compatibility_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v = pgTable(
  '_products_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => products.id, {
      onDelete: 'set null',
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_title: varchar('version_title'),
    version_description: varchar('version_description'),
    version_moreInfo: jsonb('version_more_info'),
    version_publishedOn: timestamp('version_published_on', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_enableVariants: boolean('version_enable_variants').default(false),
    version_baseProduct_sku: varchar('version_base_product_sku'),
    version_baseProduct_productActive: boolean('version_base_product_product_active').default(true),
    version_baseProduct_soldOnline: boolean('version_base_product_sold_online').default(true),
    version_baseProduct_enableInventory: boolean('version_base_product_enable_inventory').default(
      false,
    ),
    version_baseProduct_inventory: numeric('version_base_product_inventory').default('0'),
    version_baseProduct_price: numeric('version_base_product_price'),
    version_priceMin: numeric('version_price_min').default('0'),
    version_priceMax: numeric('version_price_max').default('0'),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__products_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _products_v_parent_idx: index('_products_v_parent_idx').on(columns.parent),
    _products_v_version_version_slug_idx: index('_products_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _products_v_version_version_title_idx: index('_products_v_version_version_title_idx').on(
      columns.version_title,
    ),
    _products_v_version_version_price_min_idx: index(
      '_products_v_version_version_price_min_idx',
    ).on(columns.version_priceMin),
    _products_v_version_version_price_max_idx: index(
      '_products_v_version_version_price_max_idx',
    ).on(columns.version_priceMax),
    _products_v_version_version_updated_at_idx: index(
      '_products_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _products_v_version_version_created_at_idx: index(
      '_products_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _products_v_version_version__status_idx: index('_products_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _products_v_created_at_idx: index('_products_v_created_at_idx').on(columns.createdAt),
    _products_v_updated_at_idx: index('_products_v_updated_at_idx').on(columns.updatedAt),
    _products_v_latest_idx: index('_products_v_latest_idx').on(columns.latest),
    _products_v_autosave_idx: index('_products_v_autosave_idx').on(columns.autosave),
  }),
)

export const _products_v_texts = pgTable(
  '_products_v_texts',
  {
    id: serial('id').primaryKey(),
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    text: varchar('text'),
  },
  (columns) => ({
    orderParentIdx: index('_products_v_texts_order_parent_idx').on(columns.order, columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_products_v.id],
      name: '_products_v_texts_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const _products_v_rels = pgTable(
  '_products_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    productsID: integer('products_id'),
    brandsID: integer('brands_id'),
    'product-collectionsID': integer('product_collections_id'),
    'product-categoriesID': integer('product_categories_id'),
  },
  (columns) => ({
    order: index('_products_v_rels_order_idx').on(columns.order),
    parentIdx: index('_products_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_products_v_rels_path_idx').on(columns.path),
    _products_v_rels_products_id_idx: index('_products_v_rels_products_id_idx').on(
      columns.productsID,
    ),
    _products_v_rels_brands_id_idx: index('_products_v_rels_brands_id_idx').on(columns.brandsID),
    _products_v_rels_product_collections_id_idx: index(
      '_products_v_rels_product_collections_id_idx',
    ).on(columns['product-collectionsID']),
    _products_v_rels_product_categories_id_idx: index(
      '_products_v_rels_product_categories_id_idx',
    ).on(columns['product-categoriesID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_products_v.id],
      name: '_products_v_rels_parent_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: '_products_v_rels_products_fk',
    }).onDelete('cascade'),
    brandsIdFk: foreignKey({
      columns: [columns['brandsID']],
      foreignColumns: [brands.id],
      name: '_products_v_rels_brands_fk',
    }).onDelete('cascade'),
    'product-collectionsIdFk': foreignKey({
      columns: [columns['product-collectionsID']],
      foreignColumns: [product_collections.id],
      name: '_products_v_rels_product_collections_fk',
    }).onDelete('cascade'),
    'product-categoriesIdFk': foreignKey({
      columns: [columns['product-categoriesID']],
      foreignColumns: [product_categories.id],
      name: '_products_v_rels_product_categories_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_hero_links = pgTable(
  'pages_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum_pages_hero_links_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_hero_slides_links = pgTable(
  'pages_hero_slides_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_hero_slides_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_hero_slides_links_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_hero_slides_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_hero_slides_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_hero_slides.id],
      name: 'pages_hero_slides_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_hero_slides = pgTable(
  'pages_hero_slides',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    pretitle: varchar('pretitle'),
    title: varchar('title'),
    description: varchar('description'),
    background: integer('background_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('pages_hero_slides_order_idx').on(columns._order),
    _parentIDIdx: index('pages_hero_slides_parent_id_idx').on(columns._parentID),
    pages_hero_slides_background_idx: index('pages_hero_slides_background_idx').on(
      columns.background,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_hero_slides_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_archive = pgTable(
  'pages_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    introContent: jsonb('intro_content'),
    populateBy: enum_pages_blocks_archive_populate_by('populate_by').default('collection'),
    relationTo: enum_pages_blocks_archive_relation_to('relation_to').default('posts'),
    limit: numeric('limit').default('10'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_archive_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_banner = pgTable(
  'pages_blocks_banner',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    style: enum_pages_blocks_banner_style('style').default('info'),
    content: jsonb('content'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_banner_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_banner_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_banner_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_banner_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_cta_links = pgTable(
  'pages_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_blocks_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_cta_links_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cta_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_cta.id],
      name: 'pages_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_cta = pgTable(
  'pages_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    richText: jsonb('rich_text'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_cta_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_code = pgTable(
  'pages_blocks_code',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    language: enum_pages_blocks_code_language('language').default('typescript'),
    code: varchar('code'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_code_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_code_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_code_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_code_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_media_block = pgTable(
  'pages_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    position: enum_pages_blocks_media_block_position('position').default('default'),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_media_block_path_idx').on(columns._path),
    pages_blocks_media_block_media_idx: index('pages_blocks_media_block_media_idx').on(
      columns.media,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_typography_links = pgTable(
  'pages_blocks_typography_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_blocks_typography_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_typography_links_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_typography_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_typography_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_typography.id],
      name: 'pages_blocks_typography_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_typography = pgTable(
  'pages_blocks_typography',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    type: enum_pages_blocks_typography_type('type').default('sub-title-body'),
    enableLinks: boolean('enable_links').default(true),
    align: enum_pages_blocks_typography_align('align').default('left'),
    title: varchar('title'),
    subTitle: varchar('sub_title'),
    body: jsonb('body'),
    titleFontColor: varchar('title_font_color'),
    subtitleFontColor: varchar('subtitle_font_color'),
    bodyFontColor: varchar('body_font_color'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_typography_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_typography_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_typography_path_idx').on(columns._path),
    pages_blocks_typography_title_font_color_idx: index(
      'pages_blocks_typography_title_font_color_idx',
    ).on(columns.titleFontColor),
    pages_blocks_typography_subtitle_font_color_idx: index(
      'pages_blocks_typography_subtitle_font_color_idx',
    ).on(columns.subtitleFontColor),
    pages_blocks_typography_body_font_color_idx: index(
      'pages_blocks_typography_body_font_color_idx',
    ).on(columns.bodyFontColor),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_typography_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_card = pgTable(
  'pages_blocks_card',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    type: enum_pages_blocks_card_type('type').default('icon'),
    icon: enum_pages_blocks_card_icon('icon'),
    title: varchar('title'),
    description: varchar('description'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_card_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_card_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_card_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_card_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_grid_content = pgTable(
  'pages_blocks_grid_content',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    contentType: enum_pages_blocks_grid_content_content_type('content_type').default('blocks'),
    richText: jsonb('rich_text'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_grid_content_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_grid_content_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_grid.id],
      name: 'pages_blocks_grid_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_grid = pgTable(
  'pages_blocks_grid',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    gridStyle: enum_pages_blocks_grid_grid_style('grid_style').default('basic'),
    columns: numeric('columns').default('3'),
    gap: numeric('gap').default('20'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_grid_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_grid_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_grid_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_grid_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_content_columns = pgTable(
  'pages_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    type: enum_pages_blocks_content_columns_type('type').default('blocks'),
    size: enum_pages_blocks_content_columns_size('size').default('oneThird'),
    height: numeric('height'),
    align: enum_pages_blocks_content_columns_align('align').default('start'),
    enableLink: boolean('enable_link'),
    enableBackgroundImage: boolean('enable_background_image'),
    backgroundImage: integer('background_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    richText: jsonb('rich_text'),
    link_type: enum_pages_blocks_content_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_content_columns_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_content_columns_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_content_columns_parent_id_idx').on(columns._parentID),
    pages_blocks_content_columns_background_image_idx: index(
      'pages_blocks_content_columns_background_image_idx',
    ).on(columns.backgroundImage),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_content.id],
      name: 'pages_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_content = pgTable(
  'pages_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    gapX: numeric('gap_x'),
    gapY: numeric('gap_y'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_content_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_content_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_form = pgTable(
  'pages_blocks_form',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    enableIntro: boolean('enable_intro'),
    preTitle: varchar('pre_title'),
    title: varchar('title'),
    body: jsonb('body'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_form_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_form_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_form_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_form_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_services_offerings = pgTable(
  'pages_blocks_services_offerings',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    link_type: enum_pages_blocks_services_offerings_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_services_offerings_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_services_offerings_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_services_offerings_parent_id_idx').on(columns._parentID),
    pages_blocks_services_offerings_image_idx: index(
      'pages_blocks_services_offerings_image_idx',
    ).on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_services.id],
      name: 'pages_blocks_services_offerings_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_services = pgTable(
  'pages_blocks_services',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    body: varchar('body'),
    link_type: enum_pages_blocks_services_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_services_link_appearance('link_appearance').default('default'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_services_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_services_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_services_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_services_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_testimonials = pgTable(
  'pages_blocks_testimonials',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    body: varchar('body'),
    link_type: enum_pages_blocks_testimonials_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_testimonials_link_appearance('link_appearance').default('default'),
    populateBy: enum_pages_blocks_testimonials_populate_by('populate_by').default('collection'),
    limit: numeric('limit').default('10'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_testimonials_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_testimonials_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_testimonials_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_testimonials_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_contact = pgTable(
  'pages_blocks_contact',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    message: varchar('message'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_contact_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_contact_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_contact_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_contact_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_latest_posts = pgTable(
  'pages_blocks_latest_posts',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    body: varchar('body'),
    link_type: enum_pages_blocks_latest_posts_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_latest_posts_link_appearance('link_appearance').default('default'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_latest_posts_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_latest_posts_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_latest_posts_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_latest_posts_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_featured_spas = pgTable(
  'pages_blocks_featured_spas',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    preTitle: varchar('pre_title'),
    title: varchar('title'),
    body: jsonb('body'),
    link_type: enum_pages_blocks_featured_spas_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_featured_spas_link_appearance('link_appearance').default('default'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_featured_spas_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_featured_spas_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_featured_spas_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_featured_spas_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages = pgTable(
  'pages',
  {
    id: serial('id').primaryKey(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    title: varchar('title'),
    hero_type: enum_pages_hero_type('hero_type').default('standard'),
    hero_richText: jsonb('hero_rich_text'),
    hero_title: varchar('hero_title'),
    hero_subtitle: varchar('hero_subtitle'),
    hero_size: enum_pages_hero_size('hero_size').default('medium'),
    hero_background: integer('hero_background_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    hero_media: integer('hero_media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    hero_autoplay: boolean('hero_autoplay').default(true),
    hero_delay: numeric('hero_delay'),
    hero_fade: boolean('hero_fade').default(true),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_pages_status('_status').default('draft'),
  },
  (columns) => ({
    pages_slug_idx: index('pages_slug_idx').on(columns.slug),
    pages_hero_hero_background_idx: index('pages_hero_hero_background_idx').on(
      columns.hero_background,
    ),
    pages_hero_hero_media_idx: index('pages_hero_hero_media_idx').on(columns.hero_media),
    pages_meta_meta_image_idx: index('pages_meta_meta_image_idx').on(columns.meta_image),
    pages_updated_at_idx: index('pages_updated_at_idx').on(columns.updatedAt),
    pages_created_at_idx: index('pages_created_at_idx').on(columns.createdAt),
    pages__status_idx: index('pages__status_idx').on(columns._status),
  }),
)

export const pages_rels = pgTable(
  'pages_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    'blog-categoriesID': integer('blog_categories_id'),
    postsID: integer('posts_id'),
    testimonialsID: integer('testimonials_id'),
    spasID: integer('spas_id'),
  },
  (columns) => ({
    order: index('pages_rels_order_idx').on(columns.order),
    parentIdx: index('pages_rels_parent_idx').on(columns.parent),
    pathIdx: index('pages_rels_path_idx').on(columns.path),
    pages_rels_pages_id_idx: index('pages_rels_pages_id_idx').on(columns.pagesID),
    pages_rels_blog_categories_id_idx: index('pages_rels_blog_categories_id_idx').on(
      columns['blog-categoriesID'],
    ),
    pages_rels_posts_id_idx: index('pages_rels_posts_id_idx').on(columns.postsID),
    pages_rels_testimonials_id_idx: index('pages_rels_testimonials_id_idx').on(
      columns.testimonialsID,
    ),
    pages_rels_spas_id_idx: index('pages_rels_spas_id_idx').on(columns.spasID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [pages.id],
      name: 'pages_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'pages_rels_pages_fk',
    }).onDelete('cascade'),
    'blog-categoriesIdFk': foreignKey({
      columns: [columns['blog-categoriesID']],
      foreignColumns: [blog_categories.id],
      name: 'pages_rels_blog_categories_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'pages_rels_posts_fk',
    }).onDelete('cascade'),
    testimonialsIdFk: foreignKey({
      columns: [columns['testimonialsID']],
      foreignColumns: [testimonials.id],
      name: 'pages_rels_testimonials_fk',
    }).onDelete('cascade'),
    spasIdFk: foreignKey({
      columns: [columns['spasID']],
      foreignColumns: [spas.id],
      name: 'pages_rels_spas_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_version_hero_links = pgTable(
  '_pages_v_version_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__pages_v_version_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_version_hero_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_version_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_version_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_version_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_version_hero_slides_links = pgTable(
  '_pages_v_version_hero_slides_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__pages_v_version_hero_slides_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_version_hero_slides_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_version_hero_slides_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_version_hero_slides_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_version_hero_slides.id],
      name: '_pages_v_version_hero_slides_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_version_hero_slides = pgTable(
  '_pages_v_version_hero_slides',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    pretitle: varchar('pretitle'),
    title: varchar('title'),
    description: varchar('description'),
    background: integer('background_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_version_hero_slides_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_version_hero_slides_parent_id_idx').on(columns._parentID),
    _pages_v_version_hero_slides_background_idx: index(
      '_pages_v_version_hero_slides_background_idx',
    ).on(columns.background),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_version_hero_slides_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_archive = pgTable(
  '_pages_v_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    introContent: jsonb('intro_content'),
    populateBy: enum__pages_v_blocks_archive_populate_by('populate_by').default('collection'),
    relationTo: enum__pages_v_blocks_archive_relation_to('relation_to').default('posts'),
    limit: numeric('limit').default('10'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_archive_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_banner = pgTable(
  '_pages_v_blocks_banner',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    style: enum__pages_v_blocks_banner_style('style').default('info'),
    content: jsonb('content'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_banner_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_banner_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_banner_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_banner_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_cta_links = pgTable(
  '_pages_v_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__pages_v_blocks_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_cta_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_cta_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_cta.id],
      name: '_pages_v_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_cta = pgTable(
  '_pages_v_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    richText: jsonb('rich_text'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_cta_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_code = pgTable(
  '_pages_v_blocks_code',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    language: enum__pages_v_blocks_code_language('language').default('typescript'),
    code: varchar('code'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_code_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_code_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_code_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_code_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_media_block = pgTable(
  '_pages_v_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    position: enum__pages_v_blocks_media_block_position('position').default('default'),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_media_block_path_idx').on(columns._path),
    _pages_v_blocks_media_block_media_idx: index('_pages_v_blocks_media_block_media_idx').on(
      columns.media,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_typography_links = pgTable(
  '_pages_v_blocks_typography_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__pages_v_blocks_typography_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_typography_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_typography_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_typography_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_typography.id],
      name: '_pages_v_blocks_typography_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_typography = pgTable(
  '_pages_v_blocks_typography',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    type: enum__pages_v_blocks_typography_type('type').default('sub-title-body'),
    enableLinks: boolean('enable_links').default(true),
    align: enum__pages_v_blocks_typography_align('align').default('left'),
    title: varchar('title'),
    subTitle: varchar('sub_title'),
    body: jsonb('body'),
    titleFontColor: varchar('title_font_color'),
    subtitleFontColor: varchar('subtitle_font_color'),
    bodyFontColor: varchar('body_font_color'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_typography_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_typography_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_typography_path_idx').on(columns._path),
    _pages_v_blocks_typography_title_font_color_idx: index(
      '_pages_v_blocks_typography_title_font_color_idx',
    ).on(columns.titleFontColor),
    _pages_v_blocks_typography_subtitle_font_color_idx: index(
      '_pages_v_blocks_typography_subtitle_font_color_idx',
    ).on(columns.subtitleFontColor),
    _pages_v_blocks_typography_body_font_color_idx: index(
      '_pages_v_blocks_typography_body_font_color_idx',
    ).on(columns.bodyFontColor),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_typography_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_card = pgTable(
  '_pages_v_blocks_card',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    type: enum__pages_v_blocks_card_type('type').default('icon'),
    icon: enum__pages_v_blocks_card_icon('icon'),
    title: varchar('title'),
    description: varchar('description'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_card_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_card_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_card_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_card_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_grid_content = pgTable(
  '_pages_v_blocks_grid_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    contentType: enum__pages_v_blocks_grid_content_content_type('content_type').default('blocks'),
    richText: jsonb('rich_text'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_grid_content_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_grid_content_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_grid.id],
      name: '_pages_v_blocks_grid_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_grid = pgTable(
  '_pages_v_blocks_grid',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    gridStyle: enum__pages_v_blocks_grid_grid_style('grid_style').default('basic'),
    columns: numeric('columns').default('3'),
    gap: numeric('gap').default('20'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_grid_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_grid_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_grid_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_grid_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_content_columns = pgTable(
  '_pages_v_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    type: enum__pages_v_blocks_content_columns_type('type').default('blocks'),
    size: enum__pages_v_blocks_content_columns_size('size').default('oneThird'),
    height: numeric('height'),
    align: enum__pages_v_blocks_content_columns_align('align').default('start'),
    enableLink: boolean('enable_link'),
    enableBackgroundImage: boolean('enable_background_image'),
    backgroundImage: integer('background_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    richText: jsonb('rich_text'),
    link_type: enum__pages_v_blocks_content_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_content_columns_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_content_columns_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_content_columns_parent_id_idx').on(columns._parentID),
    _pages_v_blocks_content_columns_background_image_idx: index(
      '_pages_v_blocks_content_columns_background_image_idx',
    ).on(columns.backgroundImage),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_content.id],
      name: '_pages_v_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_content = pgTable(
  '_pages_v_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    gapX: numeric('gap_x'),
    gapY: numeric('gap_y'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_content_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_content_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_form = pgTable(
  '_pages_v_blocks_form',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    enableIntro: boolean('enable_intro'),
    preTitle: varchar('pre_title'),
    title: varchar('title'),
    body: jsonb('body'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_form_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_form_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_form_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_form_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_services_offerings = pgTable(
  '_pages_v_blocks_services_offerings',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    link_type: enum__pages_v_blocks_services_offerings_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_services_offerings_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_services_offerings_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_services_offerings_parent_id_idx').on(columns._parentID),
    _pages_v_blocks_services_offerings_image_idx: index(
      '_pages_v_blocks_services_offerings_image_idx',
    ).on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_services.id],
      name: '_pages_v_blocks_services_offerings_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_services = pgTable(
  '_pages_v_blocks_services',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    body: varchar('body'),
    link_type: enum__pages_v_blocks_services_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_services_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_services_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_services_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_services_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_services_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_testimonials = pgTable(
  '_pages_v_blocks_testimonials',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    body: varchar('body'),
    link_type: enum__pages_v_blocks_testimonials_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_testimonials_link_appearance('link_appearance').default('default'),
    populateBy: enum__pages_v_blocks_testimonials_populate_by('populate_by').default('collection'),
    limit: numeric('limit').default('10'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_testimonials_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_testimonials_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_testimonials_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_testimonials_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_contact = pgTable(
  '_pages_v_blocks_contact',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    message: varchar('message'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_contact_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_contact_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_contact_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_contact_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_latest_posts = pgTable(
  '_pages_v_blocks_latest_posts',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    body: varchar('body'),
    link_type: enum__pages_v_blocks_latest_posts_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_latest_posts_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_latest_posts_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_latest_posts_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_latest_posts_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_latest_posts_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_featured_spas = pgTable(
  '_pages_v_blocks_featured_spas',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    preTitle: varchar('pre_title'),
    title: varchar('title'),
    body: jsonb('body'),
    link_type: enum__pages_v_blocks_featured_spas_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_featured_spas_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_featured_spas_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_featured_spas_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_featured_spas_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_featured_spas_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v = pgTable(
  '_pages_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_title: varchar('version_title'),
    version_hero_type: enum__pages_v_version_hero_type('version_hero_type').default('standard'),
    version_hero_richText: jsonb('version_hero_rich_text'),
    version_hero_title: varchar('version_hero_title'),
    version_hero_subtitle: varchar('version_hero_subtitle'),
    version_hero_size: enum__pages_v_version_hero_size('version_hero_size').default('medium'),
    version_hero_background: integer('version_hero_background_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_hero_media: integer('version_hero_media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_hero_autoplay: boolean('version_hero_autoplay').default(true),
    version_hero_delay: numeric('version_hero_delay'),
    version_hero_fade: boolean('version_hero_fade').default(true),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__pages_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _pages_v_parent_idx: index('_pages_v_parent_idx').on(columns.parent),
    _pages_v_version_version_slug_idx: index('_pages_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _pages_v_version_hero_version_hero_background_idx: index(
      '_pages_v_version_hero_version_hero_background_idx',
    ).on(columns.version_hero_background),
    _pages_v_version_hero_version_hero_media_idx: index(
      '_pages_v_version_hero_version_hero_media_idx',
    ).on(columns.version_hero_media),
    _pages_v_version_meta_version_meta_image_idx: index(
      '_pages_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _pages_v_version_version_updated_at_idx: index('_pages_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _pages_v_version_version_created_at_idx: index('_pages_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _pages_v_version_version__status_idx: index('_pages_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _pages_v_created_at_idx: index('_pages_v_created_at_idx').on(columns.createdAt),
    _pages_v_updated_at_idx: index('_pages_v_updated_at_idx').on(columns.updatedAt),
    _pages_v_latest_idx: index('_pages_v_latest_idx').on(columns.latest),
    _pages_v_autosave_idx: index('_pages_v_autosave_idx').on(columns.autosave),
  }),
)

export const _pages_v_rels = pgTable(
  '_pages_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    'blog-categoriesID': integer('blog_categories_id'),
    postsID: integer('posts_id'),
    testimonialsID: integer('testimonials_id'),
    spasID: integer('spas_id'),
  },
  (columns) => ({
    order: index('_pages_v_rels_order_idx').on(columns.order),
    parentIdx: index('_pages_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_pages_v_rels_path_idx').on(columns.path),
    _pages_v_rels_pages_id_idx: index('_pages_v_rels_pages_id_idx').on(columns.pagesID),
    _pages_v_rels_blog_categories_id_idx: index('_pages_v_rels_blog_categories_id_idx').on(
      columns['blog-categoriesID'],
    ),
    _pages_v_rels_posts_id_idx: index('_pages_v_rels_posts_id_idx').on(columns.postsID),
    _pages_v_rels_testimonials_id_idx: index('_pages_v_rels_testimonials_id_idx').on(
      columns.testimonialsID,
    ),
    _pages_v_rels_spas_id_idx: index('_pages_v_rels_spas_id_idx').on(columns.spasID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: '_pages_v_rels_pages_fk',
    }).onDelete('cascade'),
    'blog-categoriesIdFk': foreignKey({
      columns: [columns['blog-categoriesID']],
      foreignColumns: [blog_categories.id],
      name: '_pages_v_rels_blog_categories_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_pages_v_rels_posts_fk',
    }).onDelete('cascade'),
    testimonialsIdFk: foreignKey({
      columns: [columns['testimonialsID']],
      foreignColumns: [testimonials.id],
      name: '_pages_v_rels_testimonials_fk',
    }).onDelete('cascade'),
    spasIdFk: foreignKey({
      columns: [columns['spasID']],
      foreignColumns: [spas.id],
      name: '_pages_v_rels_spas_fk',
    }).onDelete('cascade'),
  }),
)

export const posts_populated_authors = pgTable(
  'posts_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('posts_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('posts_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const posts = pgTable(
  'posts',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    content: jsonb('content'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_posts_status('_status').default('draft'),
  },
  (columns) => ({
    posts_meta_meta_image_idx: index('posts_meta_meta_image_idx').on(columns.meta_image),
    posts_slug_idx: index('posts_slug_idx').on(columns.slug),
    posts_updated_at_idx: index('posts_updated_at_idx').on(columns.updatedAt),
    posts_created_at_idx: index('posts_created_at_idx').on(columns.createdAt),
    posts__status_idx: index('posts__status_idx').on(columns._status),
  }),
)

export const posts_rels = pgTable(
  'posts_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
    'blog-categoriesID': integer('blog_categories_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('posts_rels_order_idx').on(columns.order),
    parentIdx: index('posts_rels_parent_idx').on(columns.parent),
    pathIdx: index('posts_rels_path_idx').on(columns.path),
    posts_rels_posts_id_idx: index('posts_rels_posts_id_idx').on(columns.postsID),
    posts_rels_blog_categories_id_idx: index('posts_rels_blog_categories_id_idx').on(
      columns['blog-categoriesID'],
    ),
    posts_rels_users_id_idx: index('posts_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [posts.id],
      name: 'posts_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'posts_rels_posts_fk',
    }).onDelete('cascade'),
    'blog-categoriesIdFk': foreignKey({
      columns: [columns['blog-categoriesID']],
      foreignColumns: [blog_categories.id],
      name: 'posts_rels_blog_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'posts_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const _posts_v_version_populated_authors = pgTable(
  '_posts_v_version_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('_posts_v_version_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_version_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_version_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _posts_v = pgTable(
  '_posts_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => posts.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_content: jsonb('version_content'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__posts_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _posts_v_parent_idx: index('_posts_v_parent_idx').on(columns.parent),
    _posts_v_version_meta_version_meta_image_idx: index(
      '_posts_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _posts_v_version_version_slug_idx: index('_posts_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _posts_v_version_version_updated_at_idx: index('_posts_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _posts_v_version_version_created_at_idx: index('_posts_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _posts_v_version_version__status_idx: index('_posts_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _posts_v_created_at_idx: index('_posts_v_created_at_idx').on(columns.createdAt),
    _posts_v_updated_at_idx: index('_posts_v_updated_at_idx').on(columns.updatedAt),
    _posts_v_latest_idx: index('_posts_v_latest_idx').on(columns.latest),
    _posts_v_autosave_idx: index('_posts_v_autosave_idx').on(columns.autosave),
  }),
)

export const _posts_v_rels = pgTable(
  '_posts_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
    'blog-categoriesID': integer('blog_categories_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('_posts_v_rels_order_idx').on(columns.order),
    parentIdx: index('_posts_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_posts_v_rels_path_idx').on(columns.path),
    _posts_v_rels_posts_id_idx: index('_posts_v_rels_posts_id_idx').on(columns.postsID),
    _posts_v_rels_blog_categories_id_idx: index('_posts_v_rels_blog_categories_id_idx').on(
      columns['blog-categoriesID'],
    ),
    _posts_v_rels_users_id_idx: index('_posts_v_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_posts_v_rels_posts_fk',
    }).onDelete('cascade'),
    'blog-categoriesIdFk': foreignKey({
      columns: [columns['blog-categoriesID']],
      foreignColumns: [blog_categories.id],
      name: '_posts_v_rels_blog_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: '_posts_v_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const product_categories = pgTable(
  'product_categories',
  {
    id: serial('id').primaryKey(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    fullSlug: varchar('full_slug'),
    title: varchar('title').notNull(),
    description: varchar('description'),
    parent: integer('parent_id').references((): AnyPgColumn => product_categories.id, {
      onDelete: 'set null',
    }),
    isLeaf: boolean('is_leaf').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    product_categories_slug_idx: index('product_categories_slug_idx').on(columns.slug),
    product_categories_title_idx: uniqueIndex('product_categories_title_idx').on(columns.title),
    product_categories_parent_idx: index('product_categories_parent_idx').on(columns.parent),
    product_categories_updated_at_idx: index('product_categories_updated_at_idx').on(
      columns.updatedAt,
    ),
    product_categories_created_at_idx: index('product_categories_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const product_collections = pgTable(
  'product_collections',
  {
    id: serial('id').primaryKey(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    title: varchar('title'),
    collectionType: enum_product_collections_collection_type('collection_type'),
    description: varchar('description'),
    priority: numeric('priority'),
    startDate: timestamp('start_date', { mode: 'string', withTimezone: true, precision: 3 }),
    endDate: timestamp('end_date', { mode: 'string', withTimezone: true, precision: 3 }),
    publishedOn: timestamp('published_on', { mode: 'string', withTimezone: true, precision: 3 }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_product_collections_status('_status').default('draft'),
  },
  (columns) => ({
    product_collections_slug_idx: index('product_collections_slug_idx').on(columns.slug),
    product_collections_updated_at_idx: index('product_collections_updated_at_idx').on(
      columns.updatedAt,
    ),
    product_collections_created_at_idx: index('product_collections_created_at_idx').on(
      columns.createdAt,
    ),
    product_collections__status_idx: index('product_collections__status_idx').on(columns._status),
  }),
)

export const _product_collections_v = pgTable(
  '_product_collections_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => product_collections.id, {
      onDelete: 'set null',
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_title: varchar('version_title'),
    version_collectionType:
      enum__product_collections_v_version_collection_type('version_collection_type'),
    version_description: varchar('version_description'),
    version_priority: numeric('version_priority'),
    version_startDate: timestamp('version_start_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_endDate: timestamp('version_end_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_publishedOn: timestamp('version_published_on', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__product_collections_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
  },
  (columns) => ({
    _product_collections_v_parent_idx: index('_product_collections_v_parent_idx').on(
      columns.parent,
    ),
    _product_collections_v_version_version_slug_idx: index(
      '_product_collections_v_version_version_slug_idx',
    ).on(columns.version_slug),
    _product_collections_v_version_version_updated_at_idx: index(
      '_product_collections_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _product_collections_v_version_version_created_at_idx: index(
      '_product_collections_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _product_collections_v_version_version__status_idx: index(
      '_product_collections_v_version_version__status_idx',
    ).on(columns.version__status),
    _product_collections_v_created_at_idx: index('_product_collections_v_created_at_idx').on(
      columns.createdAt,
    ),
    _product_collections_v_updated_at_idx: index('_product_collections_v_updated_at_idx').on(
      columns.updatedAt,
    ),
    _product_collections_v_latest_idx: index('_product_collections_v_latest_idx').on(
      columns.latest,
    ),
  }),
)

export const brands = pgTable(
  'brands',
  {
    id: serial('id').primaryKey(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    name: varchar('name').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    brands_slug_idx: index('brands_slug_idx').on(columns.slug),
    brands_updated_at_idx: index('brands_updated_at_idx').on(columns.updatedAt),
    brands_created_at_idx: index('brands_created_at_idx').on(columns.createdAt),
  }),
)

export const customers_billing_addresses = pgTable(
  'customers_billing_addresses',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    address_first_name: varchar('address_first_name'),
    address_last_name: varchar('address_last_name'),
    address_company: varchar('address_company'),
    address_line_1: varchar('address_line_1').notNull(),
    address_line_2: varchar('address_line_2'),
    address_city: varchar('address_city').notNull(),
    address_country: varchar('address_country').notNull(),
    address_state: varchar('address_state').notNull(),
    address_postal_code: varchar('address_postal_code').notNull(),
    address_phone: varchar('address_phone').notNull(),
    address_email: varchar('address_email').notNull(),
    address_metadata: jsonb('address_metadata'),
  },
  (columns) => ({
    _orderIdx: index('customers_billing_addresses_order_idx').on(columns._order),
    _parentIDIdx: index('customers_billing_addresses_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [customers.id],
      name: 'customers_billing_addresses_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const customers_shipping_addresses = pgTable(
  'customers_shipping_addresses',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    address_first_name: varchar('address_first_name'),
    address_last_name: varchar('address_last_name'),
    address_company: varchar('address_company'),
    address_line_1: varchar('address_line_1').notNull(),
    address_line_2: varchar('address_line_2'),
    address_city: varchar('address_city').notNull(),
    address_country: varchar('address_country').notNull(),
    address_state: varchar('address_state').notNull(),
    address_postal_code: varchar('address_postal_code').notNull(),
    address_phone: varchar('address_phone').notNull(),
    address_email: varchar('address_email').notNull(),
    address_metadata: jsonb('address_metadata'),
  },
  (columns) => ({
    _orderIdx: index('customers_shipping_addresses_order_idx').on(columns._order),
    _parentIDIdx: index('customers_shipping_addresses_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [customers.id],
      name: 'customers_shipping_addresses_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const customers = pgTable(
  'customers',
  {
    id: serial('id').primaryKey(),
    email: varchar('email').notNull(),
    has_account: boolean('has_account').default(false),
    account: integer('account_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    stripeCustomerID: varchar('stripe_customer_i_d'),
    cart: integer('cart_id').references(() => cart.id, {
      onDelete: 'set null',
    }),
    metadata: jsonb('metadata'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    customers_email_idx: uniqueIndex('customers_email_idx').on(columns.email),
    customers_account_idx: index('customers_account_idx').on(columns.account),
    customers_cart_idx: index('customers_cart_idx').on(columns.cart),
    customers_updated_at_idx: index('customers_updated_at_idx').on(columns.updatedAt),
    customers_created_at_idx: index('customers_created_at_idx').on(columns.createdAt),
  }),
)

export const customers_rels = pgTable(
  'customers_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    ordersID: integer('orders_id'),
  },
  (columns) => ({
    order: index('customers_rels_order_idx').on(columns.order),
    parentIdx: index('customers_rels_parent_idx').on(columns.parent),
    pathIdx: index('customers_rels_path_idx').on(columns.path),
    customers_rels_orders_id_idx: index('customers_rels_orders_id_idx').on(columns.ordersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [customers.id],
      name: 'customers_rels_parent_fk',
    }).onDelete('cascade'),
    ordersIdFk: foreignKey({
      columns: [columns['ordersID']],
      foreignColumns: [orders.id],
      name: 'customers_rels_orders_fk',
    }).onDelete('cascade'),
  }),
)

export const testimonials = pgTable(
  'testimonials',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    content: varchar('content').notNull(),
    author: varchar('author').notNull(),
    rating: numeric('rating').notNull(),
    date: timestamp('date', { mode: 'string', withTimezone: true, precision: 3 }).notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    testimonials_updated_at_idx: index('testimonials_updated_at_idx').on(columns.updatedAt),
    testimonials_created_at_idx: index('testimonials_created_at_idx').on(columns.createdAt),
  }),
)

export const spas = pgTable(
  'spas',
  {
    id: serial('id').primaryKey(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    type: enum_spas_type('type').notNull(),
    hotTubCollection: enum_spas_hot_tub_collection('hot_tub_collection'),
    swimSpaCollection: enum_spas_swim_spa_collection('swim_spa_collection'),
    title: varchar('title').notNull(),
    startingPrice: numeric('starting_price'),
    modelYear: numeric('model_year'),
    model: varchar('model'),
    description: varchar('description'),
    seatingDesign: varchar('seating_design'),
    seating: varchar('seating'),
    jets: varchar('jets'),
    volume: varchar('volume'),
    swimSystem: varchar('swim_system'),
    sizeCategory: varchar('size_category'),
    energyEfficiency: numeric('energy_efficiency'),
    hydroGuide: varchar('hydro_guide'),
    dimensions: varchar('dimensions'),
    height: varchar('height'),
    weightFull: varchar('weight_full'),
    weightEmpty: varchar('weight_empty'),
    swimArea: varchar('swim_area'),
    jetPumps: varchar('jet_pumps'),
    interiorLighting: varchar('interior_lighting'),
    exteriorLighting: varchar('exterior_lighting'),
    waterFalls: varchar('water_falls'),
    selfCleaning: boolean('self_cleaning'),
    circulationPump: boolean('circulation_pump'),
    automatedWellness: boolean('automated_wellness'),
    pureWaterSystem: enum_spas_pure_water_system('pure_water_system').default('optional'),
    ezZonePure: enum_spas_ez_zone_pure('ez_zone_pure').default('optional'),
    oasisPackage: enum_spas_oasis_package('oasis_package').default('optional'),
    hydroFlex: enum_spas_hydro_flex('hydro_flex').default('optional'),
    iCommand: enum_spas_i_command('i_command').default('optional'),
    northernFalls: enum_spas_northern_falls('northern_falls').default('optional'),
    chromatherapy: enum_spas_chromatherapy('chromatherapy').default('optional'),
    heater: varchar('heater'),
    electrical: varchar('electrical'),
    warranty: varchar('warranty'),
    thumbnail: integer('thumbnail_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    topdown: integer('topdown_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    threeDModel: varchar('three_d_model'),
    detailsLink: varchar('details_link'),
    quoteLink: varchar('quote_link'),
    financingLink: varchar('financing_link'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    spas_slug_idx: index('spas_slug_idx').on(columns.slug),
    spas_thumbnail_idx: index('spas_thumbnail_idx').on(columns.thumbnail),
    spas_topdown_idx: index('spas_topdown_idx').on(columns.topdown),
    spas_meta_meta_image_idx: index('spas_meta_meta_image_idx').on(columns.meta_image),
    spas_updated_at_idx: index('spas_updated_at_idx').on(columns.updatedAt),
    spas_created_at_idx: index('spas_created_at_idx').on(columns.createdAt),
  }),
)

export const galleries_hero_links = pgTable(
  'galleries_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_galleries_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_galleries_hero_links_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('galleries_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('galleries_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [galleries.id],
      name: 'galleries_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const galleries_hero_slides_links = pgTable(
  'galleries_hero_slides_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_galleries_hero_slides_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_galleries_hero_slides_links_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('galleries_hero_slides_links_order_idx').on(columns._order),
    _parentIDIdx: index('galleries_hero_slides_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [galleries_hero_slides.id],
      name: 'galleries_hero_slides_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const galleries_hero_slides = pgTable(
  'galleries_hero_slides',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    pretitle: varchar('pretitle'),
    title: varchar('title'),
    description: varchar('description'),
    background: integer('background_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('galleries_hero_slides_order_idx').on(columns._order),
    _parentIDIdx: index('galleries_hero_slides_parent_id_idx').on(columns._parentID),
    galleries_hero_slides_background_idx: index('galleries_hero_slides_background_idx').on(
      columns.background,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [galleries.id],
      name: 'galleries_hero_slides_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const galleries = pgTable(
  'galleries',
  {
    id: serial('id').primaryKey(),
    hero_type: enum_galleries_hero_type('hero_type').notNull().default('standard'),
    hero_richText: jsonb('hero_rich_text'),
    hero_title: varchar('hero_title'),
    hero_subtitle: varchar('hero_subtitle'),
    hero_size: enum_galleries_hero_size('hero_size').default('medium'),
    hero_background: integer('hero_background_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    hero_media: integer('hero_media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    hero_autoplay: boolean('hero_autoplay').default(true),
    hero_delay: numeric('hero_delay'),
    hero_fade: boolean('hero_fade').default(true),
    title: varchar('title'),
    subtitle: varchar('subtitle'),
    description: varchar('description'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    showCaptions: boolean('show_captions'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    galleries_hero_hero_background_idx: index('galleries_hero_hero_background_idx').on(
      columns.hero_background,
    ),
    galleries_hero_hero_media_idx: index('galleries_hero_hero_media_idx').on(columns.hero_media),
    galleries_slug_idx: index('galleries_slug_idx').on(columns.slug),
    galleries_updated_at_idx: index('galleries_updated_at_idx').on(columns.updatedAt),
    galleries_created_at_idx: index('galleries_created_at_idx').on(columns.createdAt),
  }),
)

export const galleries_rels = pgTable(
  'galleries_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    mediaID: integer('media_id'),
  },
  (columns) => ({
    order: index('galleries_rels_order_idx').on(columns.order),
    parentIdx: index('galleries_rels_parent_idx').on(columns.parent),
    pathIdx: index('galleries_rels_path_idx').on(columns.path),
    galleries_rels_pages_id_idx: index('galleries_rels_pages_id_idx').on(columns.pagesID),
    galleries_rels_media_id_idx: index('galleries_rels_media_id_idx').on(columns.mediaID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [galleries.id],
      name: 'galleries_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'galleries_rels_pages_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'galleries_rels_media_fk',
    }).onDelete('cascade'),
  }),
)

export const form_submissions_interested_in = pgTable(
  'form_submissions_interested_in',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    value: varchar('value'),
  },
  (columns) => ({
    _orderIdx: index('form_submissions_interested_in_order_idx').on(columns._order),
    _parentIDIdx: index('form_submissions_interested_in_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [form_submissions.id],
      name: 'form_submissions_interested_in_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const form_submissions = pgTable(
  'form_submissions',
  {
    id: serial('id').primaryKey(),
    submissionType: enum_form_submissions_submission_type('submission_type').notNull(),
    firstName: varchar('first_name').notNull(),
    lastName: varchar('last_name').notNull(),
    email: varchar('email').notNull(),
    phone: varchar('phone').notNull(),
    postalCode: varchar('postal_code').notNull(),
    message: varchar('message').notNull(),
    subscribeToMailingList: boolean('subscribe_to_mailing_list').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    form_submissions_updated_at_idx: index('form_submissions_updated_at_idx').on(columns.updatedAt),
    form_submissions_created_at_idx: index('form_submissions_created_at_idx').on(columns.createdAt),
  }),
)

export const shipping_options_shipping_rules_regions = pgTable(
  'shipping_options_shipping_rules_regions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
    postalCodePattern: varchar('postal_code_pattern'),
  },
  (columns) => ({
    _orderIdx: index('shipping_options_shipping_rules_regions_order_idx').on(columns._order),
    _parentIDIdx: index('shipping_options_shipping_rules_regions_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [shipping_options.id],
      name: 'shipping_options_shipping_rules_regions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const shipping_options = pgTable(
  'shipping_options',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    type: enum_shipping_options_type('type').notNull(),
    shippingRules_baseRate: numeric('shipping_rules_base_rate'),
    shippingRules_freeShippingThreshold: numeric('shipping_rules_free_shipping_threshold'),
    pickupLocation_first_name: varchar('pickup_location_first_name'),
    pickupLocation_last_name: varchar('pickup_location_last_name'),
    pickupLocation_company: varchar('pickup_location_company'),
    pickupLocation_line_1: varchar('pickup_location_line_1'),
    pickupLocation_line_2: varchar('pickup_location_line_2'),
    pickupLocation_city: varchar('pickup_location_city'),
    pickupLocation_country: varchar('pickup_location_country'),
    pickupLocation_state: varchar('pickup_location_state'),
    pickupLocation_postal_code: varchar('pickup_location_postal_code'),
    pickupLocation_phone: varchar('pickup_location_phone'),
    pickupLocation_email: varchar('pickup_location_email'),
    pickupLocation_metadata: jsonb('pickup_location_metadata'),
    isActive: boolean('is_active').notNull().default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    shipping_options_updated_at_idx: index('shipping_options_updated_at_idx').on(columns.updatedAt),
    shipping_options_created_at_idx: index('shipping_options_created_at_idx').on(columns.createdAt),
  }),
)

export const product_reviews = pgTable(
  'product_reviews',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    rating: numeric('rating').notNull(),
    review: varchar('review').notNull(),
    isVerifiedPurchase: boolean('is_verified_purchase').default(false),
    reviewer: integer('reviewer_id').references(() => customers.id, {
      onDelete: 'set null',
    }),
    product: integer('product_id').references(() => products.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    product_reviews_reviewer_idx: index('product_reviews_reviewer_idx').on(columns.reviewer),
    product_reviews_product_idx: index('product_reviews_product_idx').on(columns.product),
    product_reviews_updated_at_idx: index('product_reviews_updated_at_idx').on(columns.updatedAt),
    product_reviews_created_at_idx: index('product_reviews_created_at_idx').on(columns.createdAt),
  }),
)

export const product_reviews_rels = pgTable(
  'product_reviews_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    mediaID: integer('media_id'),
  },
  (columns) => ({
    order: index('product_reviews_rels_order_idx').on(columns.order),
    parentIdx: index('product_reviews_rels_parent_idx').on(columns.parent),
    pathIdx: index('product_reviews_rels_path_idx').on(columns.path),
    product_reviews_rels_media_id_idx: index('product_reviews_rels_media_id_idx').on(
      columns.mediaID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [product_reviews.id],
      name: 'product_reviews_rels_parent_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'product_reviews_rels_media_fk',
    }).onDelete('cascade'),
  }),
)

export const redirects = pgTable(
  'redirects',
  {
    id: serial('id').primaryKey(),
    from: varchar('from').notNull(),
    to_type: enum_redirects_to_type('to_type').default('reference'),
    to_url: varchar('to_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    redirects_from_idx: index('redirects_from_idx').on(columns.from),
    redirects_updated_at_idx: index('redirects_updated_at_idx').on(columns.updatedAt),
    redirects_created_at_idx: index('redirects_created_at_idx').on(columns.createdAt),
  }),
)

export const redirects_rels = pgTable(
  'redirects_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('redirects_rels_order_idx').on(columns.order),
    parentIdx: index('redirects_rels_parent_idx').on(columns.parent),
    pathIdx: index('redirects_rels_path_idx').on(columns.path),
    redirects_rels_pages_id_idx: index('redirects_rels_pages_id_idx').on(columns.pagesID),
    redirects_rels_posts_id_idx: index('redirects_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [redirects.id],
      name: 'redirects_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'redirects_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'redirects_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    'blog-categoriesID': integer('blog_categories_id'),
    mediaID: integer('media_id'),
    usersID: integer('users_id'),
    cartID: integer('cart_id'),
    ordersID: integer('orders_id'),
    productsID: integer('products_id'),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    'product-categoriesID': integer('product_categories_id'),
    'product-collectionsID': integer('product_collections_id'),
    brandsID: integer('brands_id'),
    customersID: integer('customers_id'),
    testimonialsID: integer('testimonials_id'),
    spasID: integer('spas_id'),
    galleriesID: integer('galleries_id'),
    'form-submissionsID': integer('form_submissions_id'),
    'shipping-optionsID': integer('shipping_options_id'),
    'product-reviewsID': integer('product_reviews_id'),
    redirectsID: integer('redirects_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_blog_categories_id_idx: index(
      'payload_locked_documents_rels_blog_categories_id_idx',
    ).on(columns['blog-categoriesID']),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_cart_id_idx: index(
      'payload_locked_documents_rels_cart_id_idx',
    ).on(columns.cartID),
    payload_locked_documents_rels_orders_id_idx: index(
      'payload_locked_documents_rels_orders_id_idx',
    ).on(columns.ordersID),
    payload_locked_documents_rels_products_id_idx: index(
      'payload_locked_documents_rels_products_id_idx',
    ).on(columns.productsID),
    payload_locked_documents_rels_pages_id_idx: index(
      'payload_locked_documents_rels_pages_id_idx',
    ).on(columns.pagesID),
    payload_locked_documents_rels_posts_id_idx: index(
      'payload_locked_documents_rels_posts_id_idx',
    ).on(columns.postsID),
    payload_locked_documents_rels_product_categories_id_idx: index(
      'payload_locked_documents_rels_product_categories_id_idx',
    ).on(columns['product-categoriesID']),
    payload_locked_documents_rels_product_collections_id_idx: index(
      'payload_locked_documents_rels_product_collections_id_idx',
    ).on(columns['product-collectionsID']),
    payload_locked_documents_rels_brands_id_idx: index(
      'payload_locked_documents_rels_brands_id_idx',
    ).on(columns.brandsID),
    payload_locked_documents_rels_customers_id_idx: index(
      'payload_locked_documents_rels_customers_id_idx',
    ).on(columns.customersID),
    payload_locked_documents_rels_testimonials_id_idx: index(
      'payload_locked_documents_rels_testimonials_id_idx',
    ).on(columns.testimonialsID),
    payload_locked_documents_rels_spas_id_idx: index(
      'payload_locked_documents_rels_spas_id_idx',
    ).on(columns.spasID),
    payload_locked_documents_rels_galleries_id_idx: index(
      'payload_locked_documents_rels_galleries_id_idx',
    ).on(columns.galleriesID),
    payload_locked_documents_rels_form_submissions_id_idx: index(
      'payload_locked_documents_rels_form_submissions_id_idx',
    ).on(columns['form-submissionsID']),
    payload_locked_documents_rels_shipping_options_id_idx: index(
      'payload_locked_documents_rels_shipping_options_id_idx',
    ).on(columns['shipping-optionsID']),
    payload_locked_documents_rels_product_reviews_id_idx: index(
      'payload_locked_documents_rels_product_reviews_id_idx',
    ).on(columns['product-reviewsID']),
    payload_locked_documents_rels_redirects_id_idx: index(
      'payload_locked_documents_rels_redirects_id_idx',
    ).on(columns.redirectsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    'blog-categoriesIdFk': foreignKey({
      columns: [columns['blog-categoriesID']],
      foreignColumns: [blog_categories.id],
      name: 'payload_locked_documents_rels_blog_categories_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    cartIdFk: foreignKey({
      columns: [columns['cartID']],
      foreignColumns: [cart.id],
      name: 'payload_locked_documents_rels_cart_fk',
    }).onDelete('cascade'),
    ordersIdFk: foreignKey({
      columns: [columns['ordersID']],
      foreignColumns: [orders.id],
      name: 'payload_locked_documents_rels_orders_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'payload_locked_documents_rels_products_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'payload_locked_documents_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'payload_locked_documents_rels_posts_fk',
    }).onDelete('cascade'),
    'product-categoriesIdFk': foreignKey({
      columns: [columns['product-categoriesID']],
      foreignColumns: [product_categories.id],
      name: 'payload_locked_documents_rels_product_categories_fk',
    }).onDelete('cascade'),
    'product-collectionsIdFk': foreignKey({
      columns: [columns['product-collectionsID']],
      foreignColumns: [product_collections.id],
      name: 'payload_locked_documents_rels_product_collections_fk',
    }).onDelete('cascade'),
    brandsIdFk: foreignKey({
      columns: [columns['brandsID']],
      foreignColumns: [brands.id],
      name: 'payload_locked_documents_rels_brands_fk',
    }).onDelete('cascade'),
    customersIdFk: foreignKey({
      columns: [columns['customersID']],
      foreignColumns: [customers.id],
      name: 'payload_locked_documents_rels_customers_fk',
    }).onDelete('cascade'),
    testimonialsIdFk: foreignKey({
      columns: [columns['testimonialsID']],
      foreignColumns: [testimonials.id],
      name: 'payload_locked_documents_rels_testimonials_fk',
    }).onDelete('cascade'),
    spasIdFk: foreignKey({
      columns: [columns['spasID']],
      foreignColumns: [spas.id],
      name: 'payload_locked_documents_rels_spas_fk',
    }).onDelete('cascade'),
    galleriesIdFk: foreignKey({
      columns: [columns['galleriesID']],
      foreignColumns: [galleries.id],
      name: 'payload_locked_documents_rels_galleries_fk',
    }).onDelete('cascade'),
    'form-submissionsIdFk': foreignKey({
      columns: [columns['form-submissionsID']],
      foreignColumns: [form_submissions.id],
      name: 'payload_locked_documents_rels_form_submissions_fk',
    }).onDelete('cascade'),
    'shipping-optionsIdFk': foreignKey({
      columns: [columns['shipping-optionsID']],
      foreignColumns: [shipping_options.id],
      name: 'payload_locked_documents_rels_shipping_options_fk',
    }).onDelete('cascade'),
    'product-reviewsIdFk': foreignKey({
      columns: [columns['product-reviewsID']],
      foreignColumns: [product_reviews.id],
      name: 'payload_locked_documents_rels_product_reviews_fk',
    }).onDelete('cascade'),
    redirectsIdFk: foreignKey({
      columns: [columns['redirectsID']],
      foreignColumns: [redirects.id],
      name: 'payload_locked_documents_rels_redirects_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const site_settings = pgTable(
  'site_settings',
  {
    id: serial('id').primaryKey(),
    productsPage: integer('products_page_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    general_appName: varchar('general_app_name'),
    general_appDescription: varchar('general_app_description'),
    admin_email: varchar('admin_email'),
    admin_phone_number: numeric('admin_phone_number'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    site_settings_products_page_idx: index('site_settings_products_page_idx').on(
      columns.productsPage,
    ),
  }),
)

export const shop_settings_payment_methods = pgTable(
  'shop_settings_payment_methods',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
    enabled: boolean('enabled'),
  },
  (columns) => ({
    _orderIdx: index('shop_settings_payment_methods_order_idx').on(columns._order),
    _parentIDIdx: index('shop_settings_payment_methods_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [shop_settings.id],
      name: 'shop_settings_payment_methods_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const shop_settings_shipping_methods = pgTable(
  'shop_settings_shipping_methods',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
    enabled: boolean('enabled'),
  },
  (columns) => ({
    _orderIdx: index('shop_settings_shipping_methods_order_idx').on(columns._order),
    _parentIDIdx: index('shop_settings_shipping_methods_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [shop_settings.id],
      name: 'shop_settings_shipping_methods_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const shop_settings = pgTable('shop_settings', {
  id: serial('id').primaryKey(),
  currency: enum_shop_settings_currency('currency'),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const header_site_items_item_submenu_links = pgTable(
  'header_site_items_item_submenu_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label'),
    type: enum_header_site_items_item_submenu_links_type('type').default('reference'),
    url: varchar('url'),
    newTab: boolean('new_tab'),
  },
  (columns) => ({
    _orderIdx: index('header_site_items_item_submenu_links_order_idx').on(columns._order),
    _parentIDIdx: index('header_site_items_item_submenu_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header_site_items_item_submenu.id],
      name: 'header_site_items_item_submenu_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header_site_items_item_submenu = pgTable(
  'header_site_items_item_submenu',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label'),
    isLink: boolean('is_link').default(false),
    link_type: enum_header_site_items_item_submenu_link_type('link_type').default('reference'),
    link_url: varchar('link_url'),
    link_newTab: boolean('link_new_tab'),
  },
  (columns) => ({
    _orderIdx: index('header_site_items_item_submenu_order_idx').on(columns._order),
    _parentIDIdx: index('header_site_items_item_submenu_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header_site_items.id],
      name: 'header_site_items_item_submenu_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header_site_items = pgTable(
  'header_site_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    item_label: varchar('item_label').notNull(),
    item_isLink: boolean('item_is_link').default(false),
    item_link_type: enum_header_site_items_item_link_type('item_link_type').default('reference'),
    item_link_url: varchar('item_link_url'),
    item_link_newTab: boolean('item_link_new_tab'),
  },
  (columns) => ({
    _orderIdx: index('header_site_items_order_idx').on(columns._order),
    _parentIDIdx: index('header_site_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header.id],
      name: 'header_site_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header_shop_items_item_submenu_links = pgTable(
  'header_shop_items_item_submenu_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label'),
    type: enum_header_shop_items_item_submenu_links_type('type').default('reference'),
    url: varchar('url'),
    newTab: boolean('new_tab'),
  },
  (columns) => ({
    _orderIdx: index('header_shop_items_item_submenu_links_order_idx').on(columns._order),
    _parentIDIdx: index('header_shop_items_item_submenu_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header_shop_items_item_submenu.id],
      name: 'header_shop_items_item_submenu_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header_shop_items_item_submenu = pgTable(
  'header_shop_items_item_submenu',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label'),
    isLink: boolean('is_link').default(false),
    link_type: enum_header_shop_items_item_submenu_link_type('link_type').default('reference'),
    link_url: varchar('link_url'),
    link_newTab: boolean('link_new_tab'),
  },
  (columns) => ({
    _orderIdx: index('header_shop_items_item_submenu_order_idx').on(columns._order),
    _parentIDIdx: index('header_shop_items_item_submenu_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header_shop_items.id],
      name: 'header_shop_items_item_submenu_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header_shop_items = pgTable(
  'header_shop_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    item_label: varchar('item_label').notNull(),
    item_isLink: boolean('item_is_link').default(false),
    item_link_type: enum_header_shop_items_item_link_type('item_link_type').default('reference'),
    item_link_url: varchar('item_link_url'),
    item_link_newTab: boolean('item_link_new_tab'),
  },
  (columns) => ({
    _orderIdx: index('header_shop_items_order_idx').on(columns._order),
    _parentIDIdx: index('header_shop_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header.id],
      name: 'header_shop_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header = pgTable('header', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const header_rels = pgTable(
  'header_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
  },
  (columns) => ({
    order: index('header_rels_order_idx').on(columns.order),
    parentIdx: index('header_rels_parent_idx').on(columns.parent),
    pathIdx: index('header_rels_path_idx').on(columns.path),
    header_rels_pages_id_idx: index('header_rels_pages_id_idx').on(columns.pagesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [header.id],
      name: 'header_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'header_rels_pages_fk',
    }).onDelete('cascade'),
  }),
)

export const footer_site_footer_nav_items = pgTable(
  'footer_site_footer_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_footer_site_footer_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('footer_site_footer_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('footer_site_footer_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footer.id],
      name: 'footer_site_footer_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const footer_shop_footer_nav_items = pgTable(
  'footer_shop_footer_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_footer_shop_footer_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('footer_shop_footer_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('footer_shop_footer_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footer.id],
      name: 'footer_shop_footer_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const footer = pgTable('footer', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const footer_rels = pgTable(
  'footer_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
  },
  (columns) => ({
    order: index('footer_rels_order_idx').on(columns.order),
    parentIdx: index('footer_rels_parent_idx').on(columns.parent),
    pathIdx: index('footer_rels_path_idx').on(columns.path),
    footer_rels_pages_id_idx: index('footer_rels_pages_id_idx').on(columns.pagesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [footer.id],
      name: 'footer_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'footer_rels_pages_fk',
    }).onDelete('cascade'),
  }),
)

export const store_hours_days = pgTable(
  'store_hours_days',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    dayOfWeek: enum_store_hours_days_day_of_week('day_of_week').notNull(),
    isClosed: boolean('is_closed').default(false),
    openTime: timestamp('open_time', { mode: 'string', withTimezone: true, precision: 3 }),
    openTime_tz: enum_store_hours_days_opentime_tz('opentime_tz')
      .notNull()
      .default('America/New_York'),
    closeTime: timestamp('close_time', { mode: 'string', withTimezone: true, precision: 3 }),
    closeTime_tz: enum_store_hours_days_closetime_tz('closetime_tz')
      .notNull()
      .default('America/New_York'),
  },
  (columns) => ({
    _orderIdx: index('store_hours_days_order_idx').on(columns._order),
    _parentIDIdx: index('store_hours_days_parent_id_idx').on(columns._parentID),
    store_hours_days_day_of_week_idx: uniqueIndex('store_hours_days_day_of_week_idx').on(
      columns.dayOfWeek,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [store_hours.id],
      name: 'store_hours_days_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const store_hours = pgTable('store_hours', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const relations_blog_categories = relations(blog_categories, () => ({}))
export const relations_media = relations(media, () => ({}))
export const relations_users_roles = relations(users_roles, ({ one }) => ({
  parent: one(users, {
    fields: [users_roles.parent],
    references: [users.id],
    relationName: 'roles',
  }),
}))
export const relations_users = relations(users, ({ one, many }) => ({
  roles: many(users_roles, {
    relationName: 'roles',
  }),
  customer: one(customers, {
    fields: [users.customer],
    references: [customers.id],
    relationName: 'customer',
  }),
}))
export const relations_cart_line_items_line_item_variant_options = relations(
  cart_line_items_line_item_variant_options,
  ({ one }) => ({
    _parentID: one(cart_line_items, {
      fields: [cart_line_items_line_item_variant_options._parentID],
      references: [cart_line_items.id],
      relationName: 'lineItem_variantOptions',
    }),
  }),
)
export const relations_cart_line_items = relations(cart_line_items, ({ one, many }) => ({
  _parentID: one(cart, {
    fields: [cart_line_items._parentID],
    references: [cart.id],
    relationName: 'lineItems',
  }),
  lineItem_product: one(products, {
    fields: [cart_line_items.lineItem_product],
    references: [products.id],
    relationName: 'lineItem_product',
  }),
  lineItem_variantOptions: many(cart_line_items_line_item_variant_options, {
    relationName: 'lineItem_variantOptions',
  }),
  lineItem_thumbnail: one(media, {
    fields: [cart_line_items.lineItem_thumbnail],
    references: [media.id],
    relationName: 'lineItem_thumbnail',
  }),
}))
export const relations_cart = relations(cart, ({ one, many }) => ({
  lineItems: many(cart_line_items, {
    relationName: 'lineItems',
  }),
  customer: one(customers, {
    fields: [cart.customer],
    references: [customers.id],
    relationName: 'customer',
  }),
}))
export const relations_orders_line_items_line_item_variant_options = relations(
  orders_line_items_line_item_variant_options,
  ({ one }) => ({
    _parentID: one(orders_line_items, {
      fields: [orders_line_items_line_item_variant_options._parentID],
      references: [orders_line_items.id],
      relationName: 'lineItem_variantOptions',
    }),
  }),
)
export const relations_orders_line_items = relations(orders_line_items, ({ one, many }) => ({
  _parentID: one(orders, {
    fields: [orders_line_items._parentID],
    references: [orders.id],
    relationName: 'lineItems',
  }),
  lineItem_product: one(products, {
    fields: [orders_line_items.lineItem_product],
    references: [products.id],
    relationName: 'lineItem_product',
  }),
  lineItem_variantOptions: many(orders_line_items_line_item_variant_options, {
    relationName: 'lineItem_variantOptions',
  }),
  lineItem_thumbnail: one(media, {
    fields: [orders_line_items.lineItem_thumbnail],
    references: [media.id],
    relationName: 'lineItem_thumbnail',
  }),
}))
export const relations_orders = relations(orders, ({ one, many }) => ({
  orderedBy: one(customers, {
    fields: [orders.orderedBy],
    references: [customers.id],
    relationName: 'orderedBy',
  }),
  lineItems: many(orders_line_items, {
    relationName: 'lineItems',
  }),
}))
export const relations_products_base_product_images = relations(
  products_base_product_images,
  ({ one }) => ({
    _parentID: one(products, {
      fields: [products_base_product_images._parentID],
      references: [products.id],
      relationName: 'baseProduct_images',
    }),
    image: one(media, {
      fields: [products_base_product_images.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations_products_variants_options_values = relations(
  products_variants_options_values,
  ({ one }) => ({
    _parentID: one(products_variants_options, {
      fields: [products_variants_options_values._parentID],
      references: [products_variants_options.id],
      relationName: 'values',
    }),
  }),
)
export const relations_products_variants_options = relations(
  products_variants_options,
  ({ one, many }) => ({
    _parentID: one(products, {
      fields: [products_variants_options._parentID],
      references: [products.id],
      relationName: 'variants_options',
    }),
    values: many(products_variants_options_values, {
      relationName: 'values',
    }),
  }),
)
export const relations_products_variants_variant_products_images = relations(
  products_variants_variant_products_images,
  ({ one }) => ({
    _parentID: one(products_variants_variant_products, {
      fields: [products_variants_variant_products_images._parentID],
      references: [products_variants_variant_products.id],
      relationName: 'images',
    }),
    image: one(media, {
      fields: [products_variants_variant_products_images.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations_products_variants_variant_products = relations(
  products_variants_variant_products,
  ({ one, many }) => ({
    _parentID: one(products, {
      fields: [products_variants_variant_products._parentID],
      references: [products.id],
      relationName: 'variants_variantProducts',
    }),
    images: many(products_variants_variant_products_images, {
      relationName: 'images',
    }),
  }),
)
export const relations_products_compatibility = relations(products_compatibility, ({ one }) => ({
  parent: one(products, {
    fields: [products_compatibility.parent],
    references: [products.id],
    relationName: 'compatibility',
  }),
}))
export const relations_products_texts = relations(products_texts, ({ one }) => ({
  parent: one(products, {
    fields: [products_texts.parent],
    references: [products.id],
    relationName: '_texts',
  }),
}))
export const relations_products_rels = relations(products_rels, ({ one }) => ({
  parent: one(products, {
    fields: [products_rels.parent],
    references: [products.id],
    relationName: '_rels',
  }),
  productsID: one(products, {
    fields: [products_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
  brandsID: one(brands, {
    fields: [products_rels.brandsID],
    references: [brands.id],
    relationName: 'brands',
  }),
  'product-collectionsID': one(product_collections, {
    fields: [products_rels['product-collectionsID']],
    references: [product_collections.id],
    relationName: 'product-collections',
  }),
  'product-categoriesID': one(product_categories, {
    fields: [products_rels['product-categoriesID']],
    references: [product_categories.id],
    relationName: 'product-categories',
  }),
}))
export const relations_products = relations(products, ({ many }) => ({
  baseProduct_images: many(products_base_product_images, {
    relationName: 'baseProduct_images',
  }),
  variants_options: many(products_variants_options, {
    relationName: 'variants_options',
  }),
  variants_variantProducts: many(products_variants_variant_products, {
    relationName: 'variants_variantProducts',
  }),
  compatibility: many(products_compatibility, {
    relationName: 'compatibility',
  }),
  _texts: many(products_texts, {
    relationName: '_texts',
  }),
  _rels: many(products_rels, {
    relationName: '_rels',
  }),
}))
export const relations__products_v_version_base_product_images = relations(
  _products_v_version_base_product_images,
  ({ one }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_version_base_product_images._parentID],
      references: [_products_v.id],
      relationName: 'version_baseProduct_images',
    }),
    image: one(media, {
      fields: [_products_v_version_base_product_images.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations__products_v_version_variants_options_values = relations(
  _products_v_version_variants_options_values,
  ({ one }) => ({
    _parentID: one(_products_v_version_variants_options, {
      fields: [_products_v_version_variants_options_values._parentID],
      references: [_products_v_version_variants_options.id],
      relationName: 'values',
    }),
  }),
)
export const relations__products_v_version_variants_options = relations(
  _products_v_version_variants_options,
  ({ one, many }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_version_variants_options._parentID],
      references: [_products_v.id],
      relationName: 'version_variants_options',
    }),
    values: many(_products_v_version_variants_options_values, {
      relationName: 'values',
    }),
  }),
)
export const relations__products_v_version_variants_variant_products_images = relations(
  _products_v_version_variants_variant_products_images,
  ({ one }) => ({
    _parentID: one(_products_v_version_variants_variant_products, {
      fields: [_products_v_version_variants_variant_products_images._parentID],
      references: [_products_v_version_variants_variant_products.id],
      relationName: 'images',
    }),
    image: one(media, {
      fields: [_products_v_version_variants_variant_products_images.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations__products_v_version_variants_variant_products = relations(
  _products_v_version_variants_variant_products,
  ({ one, many }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_version_variants_variant_products._parentID],
      references: [_products_v.id],
      relationName: 'version_variants_variantProducts',
    }),
    images: many(_products_v_version_variants_variant_products_images, {
      relationName: 'images',
    }),
  }),
)
export const relations__products_v_version_compatibility = relations(
  _products_v_version_compatibility,
  ({ one }) => ({
    parent: one(_products_v, {
      fields: [_products_v_version_compatibility.parent],
      references: [_products_v.id],
      relationName: 'version_compatibility',
    }),
  }),
)
export const relations__products_v_texts = relations(_products_v_texts, ({ one }) => ({
  parent: one(_products_v, {
    fields: [_products_v_texts.parent],
    references: [_products_v.id],
    relationName: '_texts',
  }),
}))
export const relations__products_v_rels = relations(_products_v_rels, ({ one }) => ({
  parent: one(_products_v, {
    fields: [_products_v_rels.parent],
    references: [_products_v.id],
    relationName: '_rels',
  }),
  productsID: one(products, {
    fields: [_products_v_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
  brandsID: one(brands, {
    fields: [_products_v_rels.brandsID],
    references: [brands.id],
    relationName: 'brands',
  }),
  'product-collectionsID': one(product_collections, {
    fields: [_products_v_rels['product-collectionsID']],
    references: [product_collections.id],
    relationName: 'product-collections',
  }),
  'product-categoriesID': one(product_categories, {
    fields: [_products_v_rels['product-categoriesID']],
    references: [product_categories.id],
    relationName: 'product-categories',
  }),
}))
export const relations__products_v = relations(_products_v, ({ one, many }) => ({
  parent: one(products, {
    fields: [_products_v.parent],
    references: [products.id],
    relationName: 'parent',
  }),
  version_baseProduct_images: many(_products_v_version_base_product_images, {
    relationName: 'version_baseProduct_images',
  }),
  version_variants_options: many(_products_v_version_variants_options, {
    relationName: 'version_variants_options',
  }),
  version_variants_variantProducts: many(_products_v_version_variants_variant_products, {
    relationName: 'version_variants_variantProducts',
  }),
  version_compatibility: many(_products_v_version_compatibility, {
    relationName: 'version_compatibility',
  }),
  _texts: many(_products_v_texts, {
    relationName: '_texts',
  }),
  _rels: many(_products_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_pages_hero_links = relations(pages_hero_links, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_hero_links._parentID],
    references: [pages.id],
    relationName: 'hero_links',
  }),
}))
export const relations_pages_hero_slides_links = relations(pages_hero_slides_links, ({ one }) => ({
  _parentID: one(pages_hero_slides, {
    fields: [pages_hero_slides_links._parentID],
    references: [pages_hero_slides.id],
    relationName: 'links',
  }),
}))
export const relations_pages_hero_slides = relations(pages_hero_slides, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_hero_slides._parentID],
    references: [pages.id],
    relationName: 'hero_slides',
  }),
  links: many(pages_hero_slides_links, {
    relationName: 'links',
  }),
  background: one(media, {
    fields: [pages_hero_slides.background],
    references: [media.id],
    relationName: 'background',
  }),
}))
export const relations_pages_blocks_archive = relations(pages_blocks_archive, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_archive._parentID],
    references: [pages.id],
    relationName: '_blocks_archive',
  }),
}))
export const relations_pages_blocks_banner = relations(pages_blocks_banner, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_banner._parentID],
    references: [pages.id],
    relationName: '_blocks_banner',
  }),
}))
export const relations_pages_blocks_cta_links = relations(pages_blocks_cta_links, ({ one }) => ({
  _parentID: one(pages_blocks_cta, {
    fields: [pages_blocks_cta_links._parentID],
    references: [pages_blocks_cta.id],
    relationName: 'links',
  }),
}))
export const relations_pages_blocks_cta = relations(pages_blocks_cta, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_cta._parentID],
    references: [pages.id],
    relationName: '_blocks_cta',
  }),
  links: many(pages_blocks_cta_links, {
    relationName: 'links',
  }),
}))
export const relations_pages_blocks_code = relations(pages_blocks_code, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_code._parentID],
    references: [pages.id],
    relationName: '_blocks_code',
  }),
}))
export const relations_pages_blocks_media_block = relations(
  pages_blocks_media_block,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_media_block._parentID],
      references: [pages.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [pages_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_pages_blocks_typography_links = relations(
  pages_blocks_typography_links,
  ({ one }) => ({
    _parentID: one(pages_blocks_typography, {
      fields: [pages_blocks_typography_links._parentID],
      references: [pages_blocks_typography.id],
      relationName: 'links',
    }),
  }),
)
export const relations_pages_blocks_typography = relations(
  pages_blocks_typography,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_typography._parentID],
      references: [pages.id],
      relationName: '_blocks_typography',
    }),
    links: many(pages_blocks_typography_links, {
      relationName: 'links',
    }),
  }),
)
export const relations_pages_blocks_card = relations(pages_blocks_card, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_card._parentID],
    references: [pages.id],
    relationName: '_blocks_card',
  }),
}))
export const relations_pages_blocks_grid_content = relations(
  pages_blocks_grid_content,
  ({ one }) => ({
    _parentID: one(pages_blocks_grid, {
      fields: [pages_blocks_grid_content._parentID],
      references: [pages_blocks_grid.id],
      relationName: 'content',
    }),
  }),
)
export const relations_pages_blocks_grid = relations(pages_blocks_grid, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_grid._parentID],
    references: [pages.id],
    relationName: '_blocks_grid',
  }),
  content: many(pages_blocks_grid_content, {
    relationName: 'content',
  }),
}))
export const relations_pages_blocks_content_columns = relations(
  pages_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(pages_blocks_content, {
      fields: [pages_blocks_content_columns._parentID],
      references: [pages_blocks_content.id],
      relationName: 'columns',
    }),
    backgroundImage: one(media, {
      fields: [pages_blocks_content_columns.backgroundImage],
      references: [media.id],
      relationName: 'backgroundImage',
    }),
  }),
)
export const relations_pages_blocks_content = relations(pages_blocks_content, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_content._parentID],
    references: [pages.id],
    relationName: '_blocks_content',
  }),
  columns: many(pages_blocks_content_columns, {
    relationName: 'columns',
  }),
}))
export const relations_pages_blocks_form = relations(pages_blocks_form, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_form._parentID],
    references: [pages.id],
    relationName: '_blocks_form',
  }),
}))
export const relations_pages_blocks_services_offerings = relations(
  pages_blocks_services_offerings,
  ({ one }) => ({
    _parentID: one(pages_blocks_services, {
      fields: [pages_blocks_services_offerings._parentID],
      references: [pages_blocks_services.id],
      relationName: 'offerings',
    }),
    image: one(media, {
      fields: [pages_blocks_services_offerings.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations_pages_blocks_services = relations(
  pages_blocks_services,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_services._parentID],
      references: [pages.id],
      relationName: '_blocks_services',
    }),
    offerings: many(pages_blocks_services_offerings, {
      relationName: 'offerings',
    }),
  }),
)
export const relations_pages_blocks_testimonials = relations(
  pages_blocks_testimonials,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_testimonials._parentID],
      references: [pages.id],
      relationName: '_blocks_testimonials',
    }),
  }),
)
export const relations_pages_blocks_contact = relations(pages_blocks_contact, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_contact._parentID],
    references: [pages.id],
    relationName: '_blocks_contact',
  }),
}))
export const relations_pages_blocks_latest_posts = relations(
  pages_blocks_latest_posts,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_latest_posts._parentID],
      references: [pages.id],
      relationName: '_blocks_latest-posts',
    }),
  }),
)
export const relations_pages_blocks_featured_spas = relations(
  pages_blocks_featured_spas,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_featured_spas._parentID],
      references: [pages.id],
      relationName: '_blocks_featured-spas',
    }),
  }),
)
export const relations_pages_rels = relations(pages_rels, ({ one }) => ({
  parent: one(pages, {
    fields: [pages_rels.parent],
    references: [pages.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [pages_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  'blog-categoriesID': one(blog_categories, {
    fields: [pages_rels['blog-categoriesID']],
    references: [blog_categories.id],
    relationName: 'blog-categories',
  }),
  postsID: one(posts, {
    fields: [pages_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  testimonialsID: one(testimonials, {
    fields: [pages_rels.testimonialsID],
    references: [testimonials.id],
    relationName: 'testimonials',
  }),
  spasID: one(spas, {
    fields: [pages_rels.spasID],
    references: [spas.id],
    relationName: 'spas',
  }),
}))
export const relations_pages = relations(pages, ({ one, many }) => ({
  hero_links: many(pages_hero_links, {
    relationName: 'hero_links',
  }),
  hero_background: one(media, {
    fields: [pages.hero_background],
    references: [media.id],
    relationName: 'hero_background',
  }),
  hero_media: one(media, {
    fields: [pages.hero_media],
    references: [media.id],
    relationName: 'hero_media',
  }),
  hero_slides: many(pages_hero_slides, {
    relationName: 'hero_slides',
  }),
  _blocks_archive: many(pages_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  _blocks_banner: many(pages_blocks_banner, {
    relationName: '_blocks_banner',
  }),
  _blocks_cta: many(pages_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_code: many(pages_blocks_code, {
    relationName: '_blocks_code',
  }),
  _blocks_mediaBlock: many(pages_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_typography: many(pages_blocks_typography, {
    relationName: '_blocks_typography',
  }),
  _blocks_card: many(pages_blocks_card, {
    relationName: '_blocks_card',
  }),
  _blocks_grid: many(pages_blocks_grid, {
    relationName: '_blocks_grid',
  }),
  _blocks_content: many(pages_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_form: many(pages_blocks_form, {
    relationName: '_blocks_form',
  }),
  _blocks_services: many(pages_blocks_services, {
    relationName: '_blocks_services',
  }),
  _blocks_testimonials: many(pages_blocks_testimonials, {
    relationName: '_blocks_testimonials',
  }),
  _blocks_contact: many(pages_blocks_contact, {
    relationName: '_blocks_contact',
  }),
  '_blocks_latest-posts': many(pages_blocks_latest_posts, {
    relationName: '_blocks_latest-posts',
  }),
  '_blocks_featured-spas': many(pages_blocks_featured_spas, {
    relationName: '_blocks_featured-spas',
  }),
  meta_image: one(media, {
    fields: [pages.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  _rels: many(pages_rels, {
    relationName: '_rels',
  }),
}))
export const relations__pages_v_version_hero_links = relations(
  _pages_v_version_hero_links,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_version_hero_links._parentID],
      references: [_pages_v.id],
      relationName: 'version_hero_links',
    }),
  }),
)
export const relations__pages_v_version_hero_slides_links = relations(
  _pages_v_version_hero_slides_links,
  ({ one }) => ({
    _parentID: one(_pages_v_version_hero_slides, {
      fields: [_pages_v_version_hero_slides_links._parentID],
      references: [_pages_v_version_hero_slides.id],
      relationName: 'links',
    }),
  }),
)
export const relations__pages_v_version_hero_slides = relations(
  _pages_v_version_hero_slides,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_version_hero_slides._parentID],
      references: [_pages_v.id],
      relationName: 'version_hero_slides',
    }),
    links: many(_pages_v_version_hero_slides_links, {
      relationName: 'links',
    }),
    background: one(media, {
      fields: [_pages_v_version_hero_slides.background],
      references: [media.id],
      relationName: 'background',
    }),
  }),
)
export const relations__pages_v_blocks_archive = relations(_pages_v_blocks_archive, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_archive._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_archive',
  }),
}))
export const relations__pages_v_blocks_banner = relations(_pages_v_blocks_banner, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_banner._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_banner',
  }),
}))
export const relations__pages_v_blocks_cta_links = relations(
  _pages_v_blocks_cta_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_cta, {
      fields: [_pages_v_blocks_cta_links._parentID],
      references: [_pages_v_blocks_cta.id],
      relationName: 'links',
    }),
  }),
)
export const relations__pages_v_blocks_cta = relations(_pages_v_blocks_cta, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_cta._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_cta',
  }),
  links: many(_pages_v_blocks_cta_links, {
    relationName: 'links',
  }),
}))
export const relations__pages_v_blocks_code = relations(_pages_v_blocks_code, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_code._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_code',
  }),
}))
export const relations__pages_v_blocks_media_block = relations(
  _pages_v_blocks_media_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_media_block._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [_pages_v_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations__pages_v_blocks_typography_links = relations(
  _pages_v_blocks_typography_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_typography, {
      fields: [_pages_v_blocks_typography_links._parentID],
      references: [_pages_v_blocks_typography.id],
      relationName: 'links',
    }),
  }),
)
export const relations__pages_v_blocks_typography = relations(
  _pages_v_blocks_typography,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_typography._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_typography',
    }),
    links: many(_pages_v_blocks_typography_links, {
      relationName: 'links',
    }),
  }),
)
export const relations__pages_v_blocks_card = relations(_pages_v_blocks_card, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_card._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_card',
  }),
}))
export const relations__pages_v_blocks_grid_content = relations(
  _pages_v_blocks_grid_content,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_grid, {
      fields: [_pages_v_blocks_grid_content._parentID],
      references: [_pages_v_blocks_grid.id],
      relationName: 'content',
    }),
  }),
)
export const relations__pages_v_blocks_grid = relations(_pages_v_blocks_grid, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_grid._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_grid',
  }),
  content: many(_pages_v_blocks_grid_content, {
    relationName: 'content',
  }),
}))
export const relations__pages_v_blocks_content_columns = relations(
  _pages_v_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_content, {
      fields: [_pages_v_blocks_content_columns._parentID],
      references: [_pages_v_blocks_content.id],
      relationName: 'columns',
    }),
    backgroundImage: one(media, {
      fields: [_pages_v_blocks_content_columns.backgroundImage],
      references: [media.id],
      relationName: 'backgroundImage',
    }),
  }),
)
export const relations__pages_v_blocks_content = relations(
  _pages_v_blocks_content,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_content._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_content',
    }),
    columns: many(_pages_v_blocks_content_columns, {
      relationName: 'columns',
    }),
  }),
)
export const relations__pages_v_blocks_form = relations(_pages_v_blocks_form, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_form._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_form',
  }),
}))
export const relations__pages_v_blocks_services_offerings = relations(
  _pages_v_blocks_services_offerings,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_services, {
      fields: [_pages_v_blocks_services_offerings._parentID],
      references: [_pages_v_blocks_services.id],
      relationName: 'offerings',
    }),
    image: one(media, {
      fields: [_pages_v_blocks_services_offerings.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations__pages_v_blocks_services = relations(
  _pages_v_blocks_services,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_services._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_services',
    }),
    offerings: many(_pages_v_blocks_services_offerings, {
      relationName: 'offerings',
    }),
  }),
)
export const relations__pages_v_blocks_testimonials = relations(
  _pages_v_blocks_testimonials,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_testimonials._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_testimonials',
    }),
  }),
)
export const relations__pages_v_blocks_contact = relations(_pages_v_blocks_contact, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_contact._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_contact',
  }),
}))
export const relations__pages_v_blocks_latest_posts = relations(
  _pages_v_blocks_latest_posts,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_latest_posts._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_latest-posts',
    }),
  }),
)
export const relations__pages_v_blocks_featured_spas = relations(
  _pages_v_blocks_featured_spas,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_featured_spas._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_featured-spas',
    }),
  }),
)
export const relations__pages_v_rels = relations(_pages_v_rels, ({ one }) => ({
  parent: one(_pages_v, {
    fields: [_pages_v_rels.parent],
    references: [_pages_v.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [_pages_v_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  'blog-categoriesID': one(blog_categories, {
    fields: [_pages_v_rels['blog-categoriesID']],
    references: [blog_categories.id],
    relationName: 'blog-categories',
  }),
  postsID: one(posts, {
    fields: [_pages_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  testimonialsID: one(testimonials, {
    fields: [_pages_v_rels.testimonialsID],
    references: [testimonials.id],
    relationName: 'testimonials',
  }),
  spasID: one(spas, {
    fields: [_pages_v_rels.spasID],
    references: [spas.id],
    relationName: 'spas',
  }),
}))
export const relations__pages_v = relations(_pages_v, ({ one, many }) => ({
  parent: one(pages, {
    fields: [_pages_v.parent],
    references: [pages.id],
    relationName: 'parent',
  }),
  version_hero_links: many(_pages_v_version_hero_links, {
    relationName: 'version_hero_links',
  }),
  version_hero_background: one(media, {
    fields: [_pages_v.version_hero_background],
    references: [media.id],
    relationName: 'version_hero_background',
  }),
  version_hero_media: one(media, {
    fields: [_pages_v.version_hero_media],
    references: [media.id],
    relationName: 'version_hero_media',
  }),
  version_hero_slides: many(_pages_v_version_hero_slides, {
    relationName: 'version_hero_slides',
  }),
  _blocks_archive: many(_pages_v_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  _blocks_banner: many(_pages_v_blocks_banner, {
    relationName: '_blocks_banner',
  }),
  _blocks_cta: many(_pages_v_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_code: many(_pages_v_blocks_code, {
    relationName: '_blocks_code',
  }),
  _blocks_mediaBlock: many(_pages_v_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_typography: many(_pages_v_blocks_typography, {
    relationName: '_blocks_typography',
  }),
  _blocks_card: many(_pages_v_blocks_card, {
    relationName: '_blocks_card',
  }),
  _blocks_grid: many(_pages_v_blocks_grid, {
    relationName: '_blocks_grid',
  }),
  _blocks_content: many(_pages_v_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_form: many(_pages_v_blocks_form, {
    relationName: '_blocks_form',
  }),
  _blocks_services: many(_pages_v_blocks_services, {
    relationName: '_blocks_services',
  }),
  _blocks_testimonials: many(_pages_v_blocks_testimonials, {
    relationName: '_blocks_testimonials',
  }),
  _blocks_contact: many(_pages_v_blocks_contact, {
    relationName: '_blocks_contact',
  }),
  '_blocks_latest-posts': many(_pages_v_blocks_latest_posts, {
    relationName: '_blocks_latest-posts',
  }),
  '_blocks_featured-spas': many(_pages_v_blocks_featured_spas, {
    relationName: '_blocks_featured-spas',
  }),
  version_meta_image: one(media, {
    fields: [_pages_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  _rels: many(_pages_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_posts_populated_authors = relations(posts_populated_authors, ({ one }) => ({
  _parentID: one(posts, {
    fields: [posts_populated_authors._parentID],
    references: [posts.id],
    relationName: 'populatedAuthors',
  }),
}))
export const relations_posts_rels = relations(posts_rels, ({ one }) => ({
  parent: one(posts, {
    fields: [posts_rels.parent],
    references: [posts.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [posts_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  'blog-categoriesID': one(blog_categories, {
    fields: [posts_rels['blog-categoriesID']],
    references: [blog_categories.id],
    relationName: 'blog-categories',
  }),
  usersID: one(users, {
    fields: [posts_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations_posts = relations(posts, ({ one, many }) => ({
  meta_image: one(media, {
    fields: [posts.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  populatedAuthors: many(posts_populated_authors, {
    relationName: 'populatedAuthors',
  }),
  _rels: many(posts_rels, {
    relationName: '_rels',
  }),
}))
export const relations__posts_v_version_populated_authors = relations(
  _posts_v_version_populated_authors,
  ({ one }) => ({
    _parentID: one(_posts_v, {
      fields: [_posts_v_version_populated_authors._parentID],
      references: [_posts_v.id],
      relationName: 'version_populatedAuthors',
    }),
  }),
)
export const relations__posts_v_rels = relations(_posts_v_rels, ({ one }) => ({
  parent: one(_posts_v, {
    fields: [_posts_v_rels.parent],
    references: [_posts_v.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [_posts_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  'blog-categoriesID': one(blog_categories, {
    fields: [_posts_v_rels['blog-categoriesID']],
    references: [blog_categories.id],
    relationName: 'blog-categories',
  }),
  usersID: one(users, {
    fields: [_posts_v_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations__posts_v = relations(_posts_v, ({ one, many }) => ({
  parent: one(posts, {
    fields: [_posts_v.parent],
    references: [posts.id],
    relationName: 'parent',
  }),
  version_meta_image: one(media, {
    fields: [_posts_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  version_populatedAuthors: many(_posts_v_version_populated_authors, {
    relationName: 'version_populatedAuthors',
  }),
  _rels: many(_posts_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_product_categories = relations(product_categories, ({ one }) => ({
  parent: one(product_categories, {
    fields: [product_categories.parent],
    references: [product_categories.id],
    relationName: 'parent',
  }),
}))
export const relations_product_collections = relations(product_collections, () => ({}))
export const relations__product_collections_v = relations(_product_collections_v, ({ one }) => ({
  parent: one(product_collections, {
    fields: [_product_collections_v.parent],
    references: [product_collections.id],
    relationName: 'parent',
  }),
}))
export const relations_brands = relations(brands, () => ({}))
export const relations_customers_billing_addresses = relations(
  customers_billing_addresses,
  ({ one }) => ({
    _parentID: one(customers, {
      fields: [customers_billing_addresses._parentID],
      references: [customers.id],
      relationName: 'billing_addresses',
    }),
  }),
)
export const relations_customers_shipping_addresses = relations(
  customers_shipping_addresses,
  ({ one }) => ({
    _parentID: one(customers, {
      fields: [customers_shipping_addresses._parentID],
      references: [customers.id],
      relationName: 'shipping_addresses',
    }),
  }),
)
export const relations_customers_rels = relations(customers_rels, ({ one }) => ({
  parent: one(customers, {
    fields: [customers_rels.parent],
    references: [customers.id],
    relationName: '_rels',
  }),
  ordersID: one(orders, {
    fields: [customers_rels.ordersID],
    references: [orders.id],
    relationName: 'orders',
  }),
}))
export const relations_customers = relations(customers, ({ one, many }) => ({
  account: one(users, {
    fields: [customers.account],
    references: [users.id],
    relationName: 'account',
  }),
  cart: one(cart, {
    fields: [customers.cart],
    references: [cart.id],
    relationName: 'cart',
  }),
  billing_addresses: many(customers_billing_addresses, {
    relationName: 'billing_addresses',
  }),
  shipping_addresses: many(customers_shipping_addresses, {
    relationName: 'shipping_addresses',
  }),
  _rels: many(customers_rels, {
    relationName: '_rels',
  }),
}))
export const relations_testimonials = relations(testimonials, () => ({}))
export const relations_spas = relations(spas, ({ one }) => ({
  thumbnail: one(media, {
    fields: [spas.thumbnail],
    references: [media.id],
    relationName: 'thumbnail',
  }),
  topdown: one(media, {
    fields: [spas.topdown],
    references: [media.id],
    relationName: 'topdown',
  }),
  meta_image: one(media, {
    fields: [spas.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
}))
export const relations_galleries_hero_links = relations(galleries_hero_links, ({ one }) => ({
  _parentID: one(galleries, {
    fields: [galleries_hero_links._parentID],
    references: [galleries.id],
    relationName: 'hero_links',
  }),
}))
export const relations_galleries_hero_slides_links = relations(
  galleries_hero_slides_links,
  ({ one }) => ({
    _parentID: one(galleries_hero_slides, {
      fields: [galleries_hero_slides_links._parentID],
      references: [galleries_hero_slides.id],
      relationName: 'links',
    }),
  }),
)
export const relations_galleries_hero_slides = relations(
  galleries_hero_slides,
  ({ one, many }) => ({
    _parentID: one(galleries, {
      fields: [galleries_hero_slides._parentID],
      references: [galleries.id],
      relationName: 'hero_slides',
    }),
    links: many(galleries_hero_slides_links, {
      relationName: 'links',
    }),
    background: one(media, {
      fields: [galleries_hero_slides.background],
      references: [media.id],
      relationName: 'background',
    }),
  }),
)
export const relations_galleries_rels = relations(galleries_rels, ({ one }) => ({
  parent: one(galleries, {
    fields: [galleries_rels.parent],
    references: [galleries.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [galleries_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  mediaID: one(media, {
    fields: [galleries_rels.mediaID],
    references: [media.id],
    relationName: 'media',
  }),
}))
export const relations_galleries = relations(galleries, ({ one, many }) => ({
  hero_links: many(galleries_hero_links, {
    relationName: 'hero_links',
  }),
  hero_background: one(media, {
    fields: [galleries.hero_background],
    references: [media.id],
    relationName: 'hero_background',
  }),
  hero_media: one(media, {
    fields: [galleries.hero_media],
    references: [media.id],
    relationName: 'hero_media',
  }),
  hero_slides: many(galleries_hero_slides, {
    relationName: 'hero_slides',
  }),
  _rels: many(galleries_rels, {
    relationName: '_rels',
  }),
}))
export const relations_form_submissions_interested_in = relations(
  form_submissions_interested_in,
  ({ one }) => ({
    _parentID: one(form_submissions, {
      fields: [form_submissions_interested_in._parentID],
      references: [form_submissions.id],
      relationName: 'interestedIn',
    }),
  }),
)
export const relations_form_submissions = relations(form_submissions, ({ many }) => ({
  interestedIn: many(form_submissions_interested_in, {
    relationName: 'interestedIn',
  }),
}))
export const relations_shipping_options_shipping_rules_regions = relations(
  shipping_options_shipping_rules_regions,
  ({ one }) => ({
    _parentID: one(shipping_options, {
      fields: [shipping_options_shipping_rules_regions._parentID],
      references: [shipping_options.id],
      relationName: 'shippingRules_regions',
    }),
  }),
)
export const relations_shipping_options = relations(shipping_options, ({ many }) => ({
  shippingRules_regions: many(shipping_options_shipping_rules_regions, {
    relationName: 'shippingRules_regions',
  }),
}))
export const relations_product_reviews_rels = relations(product_reviews_rels, ({ one }) => ({
  parent: one(product_reviews, {
    fields: [product_reviews_rels.parent],
    references: [product_reviews.id],
    relationName: '_rels',
  }),
  mediaID: one(media, {
    fields: [product_reviews_rels.mediaID],
    references: [media.id],
    relationName: 'media',
  }),
}))
export const relations_product_reviews = relations(product_reviews, ({ one, many }) => ({
  reviewer: one(customers, {
    fields: [product_reviews.reviewer],
    references: [customers.id],
    relationName: 'reviewer',
  }),
  product: one(products, {
    fields: [product_reviews.product],
    references: [products.id],
    relationName: 'product',
  }),
  _rels: many(product_reviews_rels, {
    relationName: '_rels',
  }),
}))
export const relations_redirects_rels = relations(redirects_rels, ({ one }) => ({
  parent: one(redirects, {
    fields: [redirects_rels.parent],
    references: [redirects.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [redirects_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [redirects_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations_redirects = relations(redirects, ({ many }) => ({
  _rels: many(redirects_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    'blog-categoriesID': one(blog_categories, {
      fields: [payload_locked_documents_rels['blog-categoriesID']],
      references: [blog_categories.id],
      relationName: 'blog-categories',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    cartID: one(cart, {
      fields: [payload_locked_documents_rels.cartID],
      references: [cart.id],
      relationName: 'cart',
    }),
    ordersID: one(orders, {
      fields: [payload_locked_documents_rels.ordersID],
      references: [orders.id],
      relationName: 'orders',
    }),
    productsID: one(products, {
      fields: [payload_locked_documents_rels.productsID],
      references: [products.id],
      relationName: 'products',
    }),
    pagesID: one(pages, {
      fields: [payload_locked_documents_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
    postsID: one(posts, {
      fields: [payload_locked_documents_rels.postsID],
      references: [posts.id],
      relationName: 'posts',
    }),
    'product-categoriesID': one(product_categories, {
      fields: [payload_locked_documents_rels['product-categoriesID']],
      references: [product_categories.id],
      relationName: 'product-categories',
    }),
    'product-collectionsID': one(product_collections, {
      fields: [payload_locked_documents_rels['product-collectionsID']],
      references: [product_collections.id],
      relationName: 'product-collections',
    }),
    brandsID: one(brands, {
      fields: [payload_locked_documents_rels.brandsID],
      references: [brands.id],
      relationName: 'brands',
    }),
    customersID: one(customers, {
      fields: [payload_locked_documents_rels.customersID],
      references: [customers.id],
      relationName: 'customers',
    }),
    testimonialsID: one(testimonials, {
      fields: [payload_locked_documents_rels.testimonialsID],
      references: [testimonials.id],
      relationName: 'testimonials',
    }),
    spasID: one(spas, {
      fields: [payload_locked_documents_rels.spasID],
      references: [spas.id],
      relationName: 'spas',
    }),
    galleriesID: one(galleries, {
      fields: [payload_locked_documents_rels.galleriesID],
      references: [galleries.id],
      relationName: 'galleries',
    }),
    'form-submissionsID': one(form_submissions, {
      fields: [payload_locked_documents_rels['form-submissionsID']],
      references: [form_submissions.id],
      relationName: 'form-submissions',
    }),
    'shipping-optionsID': one(shipping_options, {
      fields: [payload_locked_documents_rels['shipping-optionsID']],
      references: [shipping_options.id],
      relationName: 'shipping-options',
    }),
    'product-reviewsID': one(product_reviews, {
      fields: [payload_locked_documents_rels['product-reviewsID']],
      references: [product_reviews.id],
      relationName: 'product-reviews',
    }),
    redirectsID: one(redirects, {
      fields: [payload_locked_documents_rels.redirectsID],
      references: [redirects.id],
      relationName: 'redirects',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))
export const relations_site_settings = relations(site_settings, ({ one }) => ({
  productsPage: one(pages, {
    fields: [site_settings.productsPage],
    references: [pages.id],
    relationName: 'productsPage',
  }),
}))
export const relations_shop_settings_payment_methods = relations(
  shop_settings_payment_methods,
  ({ one }) => ({
    _parentID: one(shop_settings, {
      fields: [shop_settings_payment_methods._parentID],
      references: [shop_settings.id],
      relationName: 'paymentMethods',
    }),
  }),
)
export const relations_shop_settings_shipping_methods = relations(
  shop_settings_shipping_methods,
  ({ one }) => ({
    _parentID: one(shop_settings, {
      fields: [shop_settings_shipping_methods._parentID],
      references: [shop_settings.id],
      relationName: 'shippingMethods',
    }),
  }),
)
export const relations_shop_settings = relations(shop_settings, ({ many }) => ({
  paymentMethods: many(shop_settings_payment_methods, {
    relationName: 'paymentMethods',
  }),
  shippingMethods: many(shop_settings_shipping_methods, {
    relationName: 'shippingMethods',
  }),
}))
export const relations_header_site_items_item_submenu_links = relations(
  header_site_items_item_submenu_links,
  ({ one }) => ({
    _parentID: one(header_site_items_item_submenu, {
      fields: [header_site_items_item_submenu_links._parentID],
      references: [header_site_items_item_submenu.id],
      relationName: 'links',
    }),
  }),
)
export const relations_header_site_items_item_submenu = relations(
  header_site_items_item_submenu,
  ({ one, many }) => ({
    _parentID: one(header_site_items, {
      fields: [header_site_items_item_submenu._parentID],
      references: [header_site_items.id],
      relationName: 'item_submenu',
    }),
    links: many(header_site_items_item_submenu_links, {
      relationName: 'links',
    }),
  }),
)
export const relations_header_site_items = relations(header_site_items, ({ one, many }) => ({
  _parentID: one(header, {
    fields: [header_site_items._parentID],
    references: [header.id],
    relationName: 'site_items',
  }),
  item_submenu: many(header_site_items_item_submenu, {
    relationName: 'item_submenu',
  }),
}))
export const relations_header_shop_items_item_submenu_links = relations(
  header_shop_items_item_submenu_links,
  ({ one }) => ({
    _parentID: one(header_shop_items_item_submenu, {
      fields: [header_shop_items_item_submenu_links._parentID],
      references: [header_shop_items_item_submenu.id],
      relationName: 'links',
    }),
  }),
)
export const relations_header_shop_items_item_submenu = relations(
  header_shop_items_item_submenu,
  ({ one, many }) => ({
    _parentID: one(header_shop_items, {
      fields: [header_shop_items_item_submenu._parentID],
      references: [header_shop_items.id],
      relationName: 'item_submenu',
    }),
    links: many(header_shop_items_item_submenu_links, {
      relationName: 'links',
    }),
  }),
)
export const relations_header_shop_items = relations(header_shop_items, ({ one, many }) => ({
  _parentID: one(header, {
    fields: [header_shop_items._parentID],
    references: [header.id],
    relationName: 'shop_items',
  }),
  item_submenu: many(header_shop_items_item_submenu, {
    relationName: 'item_submenu',
  }),
}))
export const relations_header_rels = relations(header_rels, ({ one }) => ({
  parent: one(header, {
    fields: [header_rels.parent],
    references: [header.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [header_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
}))
export const relations_header = relations(header, ({ many }) => ({
  site_items: many(header_site_items, {
    relationName: 'site_items',
  }),
  shop_items: many(header_shop_items, {
    relationName: 'shop_items',
  }),
  _rels: many(header_rels, {
    relationName: '_rels',
  }),
}))
export const relations_footer_site_footer_nav_items = relations(
  footer_site_footer_nav_items,
  ({ one }) => ({
    _parentID: one(footer, {
      fields: [footer_site_footer_nav_items._parentID],
      references: [footer.id],
      relationName: 'siteFooter_navItems',
    }),
  }),
)
export const relations_footer_shop_footer_nav_items = relations(
  footer_shop_footer_nav_items,
  ({ one }) => ({
    _parentID: one(footer, {
      fields: [footer_shop_footer_nav_items._parentID],
      references: [footer.id],
      relationName: 'shopFooter_navItems',
    }),
  }),
)
export const relations_footer_rels = relations(footer_rels, ({ one }) => ({
  parent: one(footer, {
    fields: [footer_rels.parent],
    references: [footer.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [footer_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
}))
export const relations_footer = relations(footer, ({ many }) => ({
  siteFooter_navItems: many(footer_site_footer_nav_items, {
    relationName: 'siteFooter_navItems',
  }),
  shopFooter_navItems: many(footer_shop_footer_nav_items, {
    relationName: 'shopFooter_navItems',
  }),
  _rels: many(footer_rels, {
    relationName: '_rels',
  }),
}))
export const relations_store_hours_days = relations(store_hours_days, ({ one }) => ({
  _parentID: one(store_hours, {
    fields: [store_hours_days._parentID],
    references: [store_hours.id],
    relationName: 'days',
  }),
}))
export const relations_store_hours = relations(store_hours, ({ many }) => ({
  days: many(store_hours_days, {
    relationName: 'days',
  }),
}))

type DatabaseSchema = {
  enum_users_roles: typeof enum_users_roles
  enum_orders_status: typeof enum_orders_status
  enum_products_compatibility: typeof enum_products_compatibility
  enum_products_status: typeof enum_products_status
  enum__products_v_version_compatibility: typeof enum__products_v_version_compatibility
  enum__products_v_version_status: typeof enum__products_v_version_status
  enum_pages_hero_links_link_type: typeof enum_pages_hero_links_link_type
  enum_pages_hero_links_link_appearance: typeof enum_pages_hero_links_link_appearance
  enum_pages_hero_slides_links_link_type: typeof enum_pages_hero_slides_links_link_type
  enum_pages_hero_slides_links_link_appearance: typeof enum_pages_hero_slides_links_link_appearance
  enum_pages_blocks_archive_populate_by: typeof enum_pages_blocks_archive_populate_by
  enum_pages_blocks_archive_relation_to: typeof enum_pages_blocks_archive_relation_to
  enum_pages_blocks_banner_style: typeof enum_pages_blocks_banner_style
  enum_pages_blocks_cta_links_link_type: typeof enum_pages_blocks_cta_links_link_type
  enum_pages_blocks_cta_links_link_appearance: typeof enum_pages_blocks_cta_links_link_appearance
  enum_pages_blocks_code_language: typeof enum_pages_blocks_code_language
  enum_pages_blocks_media_block_position: typeof enum_pages_blocks_media_block_position
  enum_pages_blocks_typography_links_link_type: typeof enum_pages_blocks_typography_links_link_type
  enum_pages_blocks_typography_links_link_appearance: typeof enum_pages_blocks_typography_links_link_appearance
  enum_pages_blocks_typography_type: typeof enum_pages_blocks_typography_type
  enum_pages_blocks_typography_align: typeof enum_pages_blocks_typography_align
  enum_pages_blocks_card_type: typeof enum_pages_blocks_card_type
  enum_pages_blocks_card_icon: typeof enum_pages_blocks_card_icon
  enum_pages_blocks_grid_content_content_type: typeof enum_pages_blocks_grid_content_content_type
  enum_pages_blocks_grid_grid_style: typeof enum_pages_blocks_grid_grid_style
  enum_pages_blocks_content_columns_type: typeof enum_pages_blocks_content_columns_type
  enum_pages_blocks_content_columns_size: typeof enum_pages_blocks_content_columns_size
  enum_pages_blocks_content_columns_align: typeof enum_pages_blocks_content_columns_align
  enum_pages_blocks_content_columns_link_type: typeof enum_pages_blocks_content_columns_link_type
  enum_pages_blocks_content_columns_link_appearance: typeof enum_pages_blocks_content_columns_link_appearance
  enum_pages_blocks_services_offerings_link_type: typeof enum_pages_blocks_services_offerings_link_type
  enum_pages_blocks_services_offerings_link_appearance: typeof enum_pages_blocks_services_offerings_link_appearance
  enum_pages_blocks_services_link_type: typeof enum_pages_blocks_services_link_type
  enum_pages_blocks_services_link_appearance: typeof enum_pages_blocks_services_link_appearance
  enum_pages_blocks_testimonials_link_type: typeof enum_pages_blocks_testimonials_link_type
  enum_pages_blocks_testimonials_link_appearance: typeof enum_pages_blocks_testimonials_link_appearance
  enum_pages_blocks_testimonials_populate_by: typeof enum_pages_blocks_testimonials_populate_by
  enum_pages_blocks_latest_posts_link_type: typeof enum_pages_blocks_latest_posts_link_type
  enum_pages_blocks_latest_posts_link_appearance: typeof enum_pages_blocks_latest_posts_link_appearance
  enum_pages_blocks_featured_spas_link_type: typeof enum_pages_blocks_featured_spas_link_type
  enum_pages_blocks_featured_spas_link_appearance: typeof enum_pages_blocks_featured_spas_link_appearance
  enum_pages_hero_type: typeof enum_pages_hero_type
  enum_pages_hero_size: typeof enum_pages_hero_size
  enum_pages_status: typeof enum_pages_status
  enum__pages_v_version_hero_links_link_type: typeof enum__pages_v_version_hero_links_link_type
  enum__pages_v_version_hero_links_link_appearance: typeof enum__pages_v_version_hero_links_link_appearance
  enum__pages_v_version_hero_slides_links_link_type: typeof enum__pages_v_version_hero_slides_links_link_type
  enum__pages_v_version_hero_slides_links_link_appearance: typeof enum__pages_v_version_hero_slides_links_link_appearance
  enum__pages_v_blocks_archive_populate_by: typeof enum__pages_v_blocks_archive_populate_by
  enum__pages_v_blocks_archive_relation_to: typeof enum__pages_v_blocks_archive_relation_to
  enum__pages_v_blocks_banner_style: typeof enum__pages_v_blocks_banner_style
  enum__pages_v_blocks_cta_links_link_type: typeof enum__pages_v_blocks_cta_links_link_type
  enum__pages_v_blocks_cta_links_link_appearance: typeof enum__pages_v_blocks_cta_links_link_appearance
  enum__pages_v_blocks_code_language: typeof enum__pages_v_blocks_code_language
  enum__pages_v_blocks_media_block_position: typeof enum__pages_v_blocks_media_block_position
  enum__pages_v_blocks_typography_links_link_type: typeof enum__pages_v_blocks_typography_links_link_type
  enum__pages_v_blocks_typography_links_link_appearance: typeof enum__pages_v_blocks_typography_links_link_appearance
  enum__pages_v_blocks_typography_type: typeof enum__pages_v_blocks_typography_type
  enum__pages_v_blocks_typography_align: typeof enum__pages_v_blocks_typography_align
  enum__pages_v_blocks_card_type: typeof enum__pages_v_blocks_card_type
  enum__pages_v_blocks_card_icon: typeof enum__pages_v_blocks_card_icon
  enum__pages_v_blocks_grid_content_content_type: typeof enum__pages_v_blocks_grid_content_content_type
  enum__pages_v_blocks_grid_grid_style: typeof enum__pages_v_blocks_grid_grid_style
  enum__pages_v_blocks_content_columns_type: typeof enum__pages_v_blocks_content_columns_type
  enum__pages_v_blocks_content_columns_size: typeof enum__pages_v_blocks_content_columns_size
  enum__pages_v_blocks_content_columns_align: typeof enum__pages_v_blocks_content_columns_align
  enum__pages_v_blocks_content_columns_link_type: typeof enum__pages_v_blocks_content_columns_link_type
  enum__pages_v_blocks_content_columns_link_appearance: typeof enum__pages_v_blocks_content_columns_link_appearance
  enum__pages_v_blocks_services_offerings_link_type: typeof enum__pages_v_blocks_services_offerings_link_type
  enum__pages_v_blocks_services_offerings_link_appearance: typeof enum__pages_v_blocks_services_offerings_link_appearance
  enum__pages_v_blocks_services_link_type: typeof enum__pages_v_blocks_services_link_type
  enum__pages_v_blocks_services_link_appearance: typeof enum__pages_v_blocks_services_link_appearance
  enum__pages_v_blocks_testimonials_link_type: typeof enum__pages_v_blocks_testimonials_link_type
  enum__pages_v_blocks_testimonials_link_appearance: typeof enum__pages_v_blocks_testimonials_link_appearance
  enum__pages_v_blocks_testimonials_populate_by: typeof enum__pages_v_blocks_testimonials_populate_by
  enum__pages_v_blocks_latest_posts_link_type: typeof enum__pages_v_blocks_latest_posts_link_type
  enum__pages_v_blocks_latest_posts_link_appearance: typeof enum__pages_v_blocks_latest_posts_link_appearance
  enum__pages_v_blocks_featured_spas_link_type: typeof enum__pages_v_blocks_featured_spas_link_type
  enum__pages_v_blocks_featured_spas_link_appearance: typeof enum__pages_v_blocks_featured_spas_link_appearance
  enum__pages_v_version_hero_type: typeof enum__pages_v_version_hero_type
  enum__pages_v_version_hero_size: typeof enum__pages_v_version_hero_size
  enum__pages_v_version_status: typeof enum__pages_v_version_status
  enum_posts_status: typeof enum_posts_status
  enum__posts_v_version_status: typeof enum__posts_v_version_status
  enum_product_collections_collection_type: typeof enum_product_collections_collection_type
  enum_product_collections_status: typeof enum_product_collections_status
  enum__product_collections_v_version_collection_type: typeof enum__product_collections_v_version_collection_type
  enum__product_collections_v_version_status: typeof enum__product_collections_v_version_status
  enum_spas_type: typeof enum_spas_type
  enum_spas_hot_tub_collection: typeof enum_spas_hot_tub_collection
  enum_spas_swim_spa_collection: typeof enum_spas_swim_spa_collection
  enum_spas_pure_water_system: typeof enum_spas_pure_water_system
  enum_spas_ez_zone_pure: typeof enum_spas_ez_zone_pure
  enum_spas_oasis_package: typeof enum_spas_oasis_package
  enum_spas_hydro_flex: typeof enum_spas_hydro_flex
  enum_spas_i_command: typeof enum_spas_i_command
  enum_spas_northern_falls: typeof enum_spas_northern_falls
  enum_spas_chromatherapy: typeof enum_spas_chromatherapy
  enum_galleries_hero_links_link_type: typeof enum_galleries_hero_links_link_type
  enum_galleries_hero_links_link_appearance: typeof enum_galleries_hero_links_link_appearance
  enum_galleries_hero_slides_links_link_type: typeof enum_galleries_hero_slides_links_link_type
  enum_galleries_hero_slides_links_link_appearance: typeof enum_galleries_hero_slides_links_link_appearance
  enum_galleries_hero_type: typeof enum_galleries_hero_type
  enum_galleries_hero_size: typeof enum_galleries_hero_size
  enum_form_submissions_submission_type: typeof enum_form_submissions_submission_type
  enum_shipping_options_type: typeof enum_shipping_options_type
  enum_redirects_to_type: typeof enum_redirects_to_type
  enum_shop_settings_currency: typeof enum_shop_settings_currency
  enum_header_site_items_item_submenu_links_type: typeof enum_header_site_items_item_submenu_links_type
  enum_header_site_items_item_submenu_link_type: typeof enum_header_site_items_item_submenu_link_type
  enum_header_site_items_item_link_type: typeof enum_header_site_items_item_link_type
  enum_header_shop_items_item_submenu_links_type: typeof enum_header_shop_items_item_submenu_links_type
  enum_header_shop_items_item_submenu_link_type: typeof enum_header_shop_items_item_submenu_link_type
  enum_header_shop_items_item_link_type: typeof enum_header_shop_items_item_link_type
  enum_footer_site_footer_nav_items_link_type: typeof enum_footer_site_footer_nav_items_link_type
  enum_footer_shop_footer_nav_items_link_type: typeof enum_footer_shop_footer_nav_items_link_type
  enum_store_hours_days_day_of_week: typeof enum_store_hours_days_day_of_week
  enum_store_hours_days_opentime_tz: typeof enum_store_hours_days_opentime_tz
  enum_store_hours_days_closetime_tz: typeof enum_store_hours_days_closetime_tz
  blog_categories: typeof blog_categories
  media: typeof media
  users_roles: typeof users_roles
  users: typeof users
  cart_line_items_line_item_variant_options: typeof cart_line_items_line_item_variant_options
  cart_line_items: typeof cart_line_items
  cart: typeof cart
  orders_line_items_line_item_variant_options: typeof orders_line_items_line_item_variant_options
  orders_line_items: typeof orders_line_items
  orders: typeof orders
  products_base_product_images: typeof products_base_product_images
  products_variants_options_values: typeof products_variants_options_values
  products_variants_options: typeof products_variants_options
  products_variants_variant_products_images: typeof products_variants_variant_products_images
  products_variants_variant_products: typeof products_variants_variant_products
  products_compatibility: typeof products_compatibility
  products: typeof products
  products_texts: typeof products_texts
  products_rels: typeof products_rels
  _products_v_version_base_product_images: typeof _products_v_version_base_product_images
  _products_v_version_variants_options_values: typeof _products_v_version_variants_options_values
  _products_v_version_variants_options: typeof _products_v_version_variants_options
  _products_v_version_variants_variant_products_images: typeof _products_v_version_variants_variant_products_images
  _products_v_version_variants_variant_products: typeof _products_v_version_variants_variant_products
  _products_v_version_compatibility: typeof _products_v_version_compatibility
  _products_v: typeof _products_v
  _products_v_texts: typeof _products_v_texts
  _products_v_rels: typeof _products_v_rels
  pages_hero_links: typeof pages_hero_links
  pages_hero_slides_links: typeof pages_hero_slides_links
  pages_hero_slides: typeof pages_hero_slides
  pages_blocks_archive: typeof pages_blocks_archive
  pages_blocks_banner: typeof pages_blocks_banner
  pages_blocks_cta_links: typeof pages_blocks_cta_links
  pages_blocks_cta: typeof pages_blocks_cta
  pages_blocks_code: typeof pages_blocks_code
  pages_blocks_media_block: typeof pages_blocks_media_block
  pages_blocks_typography_links: typeof pages_blocks_typography_links
  pages_blocks_typography: typeof pages_blocks_typography
  pages_blocks_card: typeof pages_blocks_card
  pages_blocks_grid_content: typeof pages_blocks_grid_content
  pages_blocks_grid: typeof pages_blocks_grid
  pages_blocks_content_columns: typeof pages_blocks_content_columns
  pages_blocks_content: typeof pages_blocks_content
  pages_blocks_form: typeof pages_blocks_form
  pages_blocks_services_offerings: typeof pages_blocks_services_offerings
  pages_blocks_services: typeof pages_blocks_services
  pages_blocks_testimonials: typeof pages_blocks_testimonials
  pages_blocks_contact: typeof pages_blocks_contact
  pages_blocks_latest_posts: typeof pages_blocks_latest_posts
  pages_blocks_featured_spas: typeof pages_blocks_featured_spas
  pages: typeof pages
  pages_rels: typeof pages_rels
  _pages_v_version_hero_links: typeof _pages_v_version_hero_links
  _pages_v_version_hero_slides_links: typeof _pages_v_version_hero_slides_links
  _pages_v_version_hero_slides: typeof _pages_v_version_hero_slides
  _pages_v_blocks_archive: typeof _pages_v_blocks_archive
  _pages_v_blocks_banner: typeof _pages_v_blocks_banner
  _pages_v_blocks_cta_links: typeof _pages_v_blocks_cta_links
  _pages_v_blocks_cta: typeof _pages_v_blocks_cta
  _pages_v_blocks_code: typeof _pages_v_blocks_code
  _pages_v_blocks_media_block: typeof _pages_v_blocks_media_block
  _pages_v_blocks_typography_links: typeof _pages_v_blocks_typography_links
  _pages_v_blocks_typography: typeof _pages_v_blocks_typography
  _pages_v_blocks_card: typeof _pages_v_blocks_card
  _pages_v_blocks_grid_content: typeof _pages_v_blocks_grid_content
  _pages_v_blocks_grid: typeof _pages_v_blocks_grid
  _pages_v_blocks_content_columns: typeof _pages_v_blocks_content_columns
  _pages_v_blocks_content: typeof _pages_v_blocks_content
  _pages_v_blocks_form: typeof _pages_v_blocks_form
  _pages_v_blocks_services_offerings: typeof _pages_v_blocks_services_offerings
  _pages_v_blocks_services: typeof _pages_v_blocks_services
  _pages_v_blocks_testimonials: typeof _pages_v_blocks_testimonials
  _pages_v_blocks_contact: typeof _pages_v_blocks_contact
  _pages_v_blocks_latest_posts: typeof _pages_v_blocks_latest_posts
  _pages_v_blocks_featured_spas: typeof _pages_v_blocks_featured_spas
  _pages_v: typeof _pages_v
  _pages_v_rels: typeof _pages_v_rels
  posts_populated_authors: typeof posts_populated_authors
  posts: typeof posts
  posts_rels: typeof posts_rels
  _posts_v_version_populated_authors: typeof _posts_v_version_populated_authors
  _posts_v: typeof _posts_v
  _posts_v_rels: typeof _posts_v_rels
  product_categories: typeof product_categories
  product_collections: typeof product_collections
  _product_collections_v: typeof _product_collections_v
  brands: typeof brands
  customers_billing_addresses: typeof customers_billing_addresses
  customers_shipping_addresses: typeof customers_shipping_addresses
  customers: typeof customers
  customers_rels: typeof customers_rels
  testimonials: typeof testimonials
  spas: typeof spas
  galleries_hero_links: typeof galleries_hero_links
  galleries_hero_slides_links: typeof galleries_hero_slides_links
  galleries_hero_slides: typeof galleries_hero_slides
  galleries: typeof galleries
  galleries_rels: typeof galleries_rels
  form_submissions_interested_in: typeof form_submissions_interested_in
  form_submissions: typeof form_submissions
  shipping_options_shipping_rules_regions: typeof shipping_options_shipping_rules_regions
  shipping_options: typeof shipping_options
  product_reviews: typeof product_reviews
  product_reviews_rels: typeof product_reviews_rels
  redirects: typeof redirects
  redirects_rels: typeof redirects_rels
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  site_settings: typeof site_settings
  shop_settings_payment_methods: typeof shop_settings_payment_methods
  shop_settings_shipping_methods: typeof shop_settings_shipping_methods
  shop_settings: typeof shop_settings
  header_site_items_item_submenu_links: typeof header_site_items_item_submenu_links
  header_site_items_item_submenu: typeof header_site_items_item_submenu
  header_site_items: typeof header_site_items
  header_shop_items_item_submenu_links: typeof header_shop_items_item_submenu_links
  header_shop_items_item_submenu: typeof header_shop_items_item_submenu
  header_shop_items: typeof header_shop_items
  header: typeof header
  header_rels: typeof header_rels
  footer_site_footer_nav_items: typeof footer_site_footer_nav_items
  footer_shop_footer_nav_items: typeof footer_shop_footer_nav_items
  footer: typeof footer
  footer_rels: typeof footer_rels
  store_hours_days: typeof store_hours_days
  store_hours: typeof store_hours
  relations_blog_categories: typeof relations_blog_categories
  relations_media: typeof relations_media
  relations_users_roles: typeof relations_users_roles
  relations_users: typeof relations_users
  relations_cart_line_items_line_item_variant_options: typeof relations_cart_line_items_line_item_variant_options
  relations_cart_line_items: typeof relations_cart_line_items
  relations_cart: typeof relations_cart
  relations_orders_line_items_line_item_variant_options: typeof relations_orders_line_items_line_item_variant_options
  relations_orders_line_items: typeof relations_orders_line_items
  relations_orders: typeof relations_orders
  relations_products_base_product_images: typeof relations_products_base_product_images
  relations_products_variants_options_values: typeof relations_products_variants_options_values
  relations_products_variants_options: typeof relations_products_variants_options
  relations_products_variants_variant_products_images: typeof relations_products_variants_variant_products_images
  relations_products_variants_variant_products: typeof relations_products_variants_variant_products
  relations_products_compatibility: typeof relations_products_compatibility
  relations_products_texts: typeof relations_products_texts
  relations_products_rels: typeof relations_products_rels
  relations_products: typeof relations_products
  relations__products_v_version_base_product_images: typeof relations__products_v_version_base_product_images
  relations__products_v_version_variants_options_values: typeof relations__products_v_version_variants_options_values
  relations__products_v_version_variants_options: typeof relations__products_v_version_variants_options
  relations__products_v_version_variants_variant_products_images: typeof relations__products_v_version_variants_variant_products_images
  relations__products_v_version_variants_variant_products: typeof relations__products_v_version_variants_variant_products
  relations__products_v_version_compatibility: typeof relations__products_v_version_compatibility
  relations__products_v_texts: typeof relations__products_v_texts
  relations__products_v_rels: typeof relations__products_v_rels
  relations__products_v: typeof relations__products_v
  relations_pages_hero_links: typeof relations_pages_hero_links
  relations_pages_hero_slides_links: typeof relations_pages_hero_slides_links
  relations_pages_hero_slides: typeof relations_pages_hero_slides
  relations_pages_blocks_archive: typeof relations_pages_blocks_archive
  relations_pages_blocks_banner: typeof relations_pages_blocks_banner
  relations_pages_blocks_cta_links: typeof relations_pages_blocks_cta_links
  relations_pages_blocks_cta: typeof relations_pages_blocks_cta
  relations_pages_blocks_code: typeof relations_pages_blocks_code
  relations_pages_blocks_media_block: typeof relations_pages_blocks_media_block
  relations_pages_blocks_typography_links: typeof relations_pages_blocks_typography_links
  relations_pages_blocks_typography: typeof relations_pages_blocks_typography
  relations_pages_blocks_card: typeof relations_pages_blocks_card
  relations_pages_blocks_grid_content: typeof relations_pages_blocks_grid_content
  relations_pages_blocks_grid: typeof relations_pages_blocks_grid
  relations_pages_blocks_content_columns: typeof relations_pages_blocks_content_columns
  relations_pages_blocks_content: typeof relations_pages_blocks_content
  relations_pages_blocks_form: typeof relations_pages_blocks_form
  relations_pages_blocks_services_offerings: typeof relations_pages_blocks_services_offerings
  relations_pages_blocks_services: typeof relations_pages_blocks_services
  relations_pages_blocks_testimonials: typeof relations_pages_blocks_testimonials
  relations_pages_blocks_contact: typeof relations_pages_blocks_contact
  relations_pages_blocks_latest_posts: typeof relations_pages_blocks_latest_posts
  relations_pages_blocks_featured_spas: typeof relations_pages_blocks_featured_spas
  relations_pages_rels: typeof relations_pages_rels
  relations_pages: typeof relations_pages
  relations__pages_v_version_hero_links: typeof relations__pages_v_version_hero_links
  relations__pages_v_version_hero_slides_links: typeof relations__pages_v_version_hero_slides_links
  relations__pages_v_version_hero_slides: typeof relations__pages_v_version_hero_slides
  relations__pages_v_blocks_archive: typeof relations__pages_v_blocks_archive
  relations__pages_v_blocks_banner: typeof relations__pages_v_blocks_banner
  relations__pages_v_blocks_cta_links: typeof relations__pages_v_blocks_cta_links
  relations__pages_v_blocks_cta: typeof relations__pages_v_blocks_cta
  relations__pages_v_blocks_code: typeof relations__pages_v_blocks_code
  relations__pages_v_blocks_media_block: typeof relations__pages_v_blocks_media_block
  relations__pages_v_blocks_typography_links: typeof relations__pages_v_blocks_typography_links
  relations__pages_v_blocks_typography: typeof relations__pages_v_blocks_typography
  relations__pages_v_blocks_card: typeof relations__pages_v_blocks_card
  relations__pages_v_blocks_grid_content: typeof relations__pages_v_blocks_grid_content
  relations__pages_v_blocks_grid: typeof relations__pages_v_blocks_grid
  relations__pages_v_blocks_content_columns: typeof relations__pages_v_blocks_content_columns
  relations__pages_v_blocks_content: typeof relations__pages_v_blocks_content
  relations__pages_v_blocks_form: typeof relations__pages_v_blocks_form
  relations__pages_v_blocks_services_offerings: typeof relations__pages_v_blocks_services_offerings
  relations__pages_v_blocks_services: typeof relations__pages_v_blocks_services
  relations__pages_v_blocks_testimonials: typeof relations__pages_v_blocks_testimonials
  relations__pages_v_blocks_contact: typeof relations__pages_v_blocks_contact
  relations__pages_v_blocks_latest_posts: typeof relations__pages_v_blocks_latest_posts
  relations__pages_v_blocks_featured_spas: typeof relations__pages_v_blocks_featured_spas
  relations__pages_v_rels: typeof relations__pages_v_rels
  relations__pages_v: typeof relations__pages_v
  relations_posts_populated_authors: typeof relations_posts_populated_authors
  relations_posts_rels: typeof relations_posts_rels
  relations_posts: typeof relations_posts
  relations__posts_v_version_populated_authors: typeof relations__posts_v_version_populated_authors
  relations__posts_v_rels: typeof relations__posts_v_rels
  relations__posts_v: typeof relations__posts_v
  relations_product_categories: typeof relations_product_categories
  relations_product_collections: typeof relations_product_collections
  relations__product_collections_v: typeof relations__product_collections_v
  relations_brands: typeof relations_brands
  relations_customers_billing_addresses: typeof relations_customers_billing_addresses
  relations_customers_shipping_addresses: typeof relations_customers_shipping_addresses
  relations_customers_rels: typeof relations_customers_rels
  relations_customers: typeof relations_customers
  relations_testimonials: typeof relations_testimonials
  relations_spas: typeof relations_spas
  relations_galleries_hero_links: typeof relations_galleries_hero_links
  relations_galleries_hero_slides_links: typeof relations_galleries_hero_slides_links
  relations_galleries_hero_slides: typeof relations_galleries_hero_slides
  relations_galleries_rels: typeof relations_galleries_rels
  relations_galleries: typeof relations_galleries
  relations_form_submissions_interested_in: typeof relations_form_submissions_interested_in
  relations_form_submissions: typeof relations_form_submissions
  relations_shipping_options_shipping_rules_regions: typeof relations_shipping_options_shipping_rules_regions
  relations_shipping_options: typeof relations_shipping_options
  relations_product_reviews_rels: typeof relations_product_reviews_rels
  relations_product_reviews: typeof relations_product_reviews
  relations_redirects_rels: typeof relations_redirects_rels
  relations_redirects: typeof relations_redirects
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
  relations_site_settings: typeof relations_site_settings
  relations_shop_settings_payment_methods: typeof relations_shop_settings_payment_methods
  relations_shop_settings_shipping_methods: typeof relations_shop_settings_shipping_methods
  relations_shop_settings: typeof relations_shop_settings
  relations_header_site_items_item_submenu_links: typeof relations_header_site_items_item_submenu_links
  relations_header_site_items_item_submenu: typeof relations_header_site_items_item_submenu
  relations_header_site_items: typeof relations_header_site_items
  relations_header_shop_items_item_submenu_links: typeof relations_header_shop_items_item_submenu_links
  relations_header_shop_items_item_submenu: typeof relations_header_shop_items_item_submenu
  relations_header_shop_items: typeof relations_header_shop_items
  relations_header_rels: typeof relations_header_rels
  relations_header: typeof relations_header
  relations_footer_site_footer_nav_items: typeof relations_footer_site_footer_nav_items
  relations_footer_shop_footer_nav_items: typeof relations_footer_shop_footer_nav_items
  relations_footer_rels: typeof relations_footer_rels
  relations_footer: typeof relations_footer
  relations_store_hours_days: typeof relations_store_hours_days
  relations_store_hours: typeof relations_store_hours
}

declare module '@payloadcms/db-vercel-postgres/types' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
